11강 리액트에서 서버와 통신하려면 ajax 1

*AJAX란? 
서버에 GET, POST 요청을 할 때 새로고침 없이 데이터를 주고받을 수 있게 도와주는
간단한 브라우저 기능
*AJAX로 GET/POST요청하려면 방법 3개 중 택1 하면 됩니다.
1. XMLHttpRequest라는 옛날 문법 쓰기
2. fetch() 라는 최신 문법 쓰기
3. axios 같은 외부 라이브러리 쓰기(많이 사용) npm install axios 

*ajax axios 사용법
import axios from 'axios'

function App(){
  return (
    <button onClick={()=>{
      axios.get('https://codingapple1.github.io/shop/data2.json').then((결과)=>{
        console.log(결과.data) ->성공할 때
      })
      .catch(()=>{
        console.log('실패함') ->실패할 때
      })
    }}>버튼</button>
  )
}
12강 리액트에서 서버와 통신하려면 ajax 2 : post, fetch
*POST요청 하는 법
axios.post('URL', {name : 'kim'})
*동시에 AJAX 요청 여러개 날리려면
Promise.all( [axios.get('URL1'), axios.get('URL2')] )
*자바스크립트 문법인 fetch() 를 이용해도 GET/POST 요청이 가능
fetch('URL').then(결과 => 결과.json()).then((결과) => { console.log(결과) } )

13강 리액트에서 탭 UI 만들기
*일반 if 조건문 사용하기
function Detail(){
  let [탭, 탭변경] = useState(0)
  return (
    <TabContent/>
  )
}
function TabContent(){
  if (탭 === 0){
    <div>내용0</div>
  }
  if (탭 === 1){
    <div>내용1</div>
  }
  if (탭 === 2){
    <div>내용2</div>
  }
}
*if문 없이 tab기능 만들기
function TabContent(props){
  return [ <div>내용0</div>, <div>내용1</div>, <div>내용2</div> ][props.탭]
}
 props.탭이 0이면 저 긴 array자료에서 0번 자료를 꺼내줄테니까

*참고사항 : props 쉽게 쓰고 싶으면
function TabContent({탭}){
  return [ <div>내용0</div>, <div>내용1</div>, <div>내용2</div> ][탭]
}
자식컴포넌트에서 props라고 파라미터를 하나만 작명하는게 아니라
{state1이름, state2이름 ... }이렇게 작성하면
props.state1이름 이렇게 쓸 필요가 없어집니다. 

14강 멋있게 컴포넌트 전환 애니메이션 주는 법 (transition)
.start {
  opacity : 0
}
.end {
  opacity : 1;
  transition : opacity 0.5s;
}
function TabContent({탭}){

  let [fade, setFade] = useState('')

  useEffect(()=>{
    setTImeout(()=>{ setFade('end') }, 100)
  return ()=>{
    setFade('')
  }
  }, [탭])

  return (
    <div className={'start ' + fade}>
      { [<div>내용0</div>, <div>내용1</div>, <div>내용2</div>][탭] }
    </div>
  )
}
->setTimeout 왜 씁니까
automatic batch 라는 기능이 생겼습니다.
state 변경함수들이 연달아서 여러개 처리되어야한다면 
state 변경함수를 다 처리하고 마지막에 한 번만 재렌더링됩니다. 
그래서 'end' 로 변경하는거랑 ' ' 이걸로 변경하는거랑 약간 시간차를 뒀습니다.
찾아보면 setTimeout 말고 flushSync() 이런거 써도 될 것 같기도 합니다.
automatic batching을 막아줍니다.

15강 props 싫으면 Context API 써도 됩니다
(자식의 자식도 props없이 사용가능)
ex) let {재고} = useContext(Context1)만 넣으면 props없이 어디서든 사용가능

*props 여러 개 쓰기(자식의 자식 전송 상황)
 <TabContent 탭={탭} shoes={props.shoes} />

function TabContent({탭,shoes}){
    (생략)
  }

*Context API 문법으로 props 없이 state 공유하기
1. 일단 createContext() 함수를 가져와서 context를 하나 만들어줍니다.
2. 아까만든 Context1로 원하는 곳을 감싸고 공유를 원하는 state를 value 안에 다 적으면 됩니다.
그럼 이제 Context1로 감싼 모든 컴포넌트와 그 자식컴포넌트는 
state를 props 전송없이 직접 사용가능합니다.
(App.js)

export let 재고context = React.createContext();

function App(){
  let [재고, 재고변경] = useState([10,11,12]);

  return (
    <Context1.Provider value={ {재고, shoes} }>
      <Detail shoes={shoes}/>
    </Context1.Provider>
    
  )
}
*Context 안에 있던 state 사용하려면
1. 만들어둔 Context를 import 해옵니다.
2. useContext() 안에 넣습니다. 
그럼 이제 그 자리에 공유했던 state가 전부 남는데 그거 쓰면 됩니다. 
(Detail.js)

import {useState, useEffect, useContext} from 'react';
import {Context1} from './../App.js';

function Detail(){
  let {재고} = useContext(Context1)

  return (
    <div>{재고}</div>
  )
}
Q. props보다 불편한데요?
A. 그럼 props를 씁시다. 이건 중첩해서 사용한 컴포넌트가 많을 때 편리한 문법입니다.

*Context API 단점
잘 안쓰는 이유는 
1. state 변경시 쓸데없는 컴포넌트까지 전부 재렌더링이 되고 
2. useContext() 를 쓰고 있는 컴포넌트는 나중에 다른 파일에서 재사용할 때
Context를 import 하는게 귀찮아질 수 있습니다.
그래서 이것 보다는 redux 같은 외부라이브러리를 많이들 사용합니다.

16강 장바구니 페이지 만들기 & Redux 1 : Redux Toolkit 설치

*Redux 쓰면 뭐가 좋냐면
Redux는 props 없이 state를 공유할 수 있게 도와주는 라이브러리
이거 설치하면 js 파일 하나에 state들을 보관할 수 있는데
그걸 모든 컴포넌트가 직접 꺼내쓸 수 있습니다. 

*Redux 설치는 
npm install @reduxjs/toolkit react-redux
설치 전에 package.json 파일을 열어서 "react" "react-dom" 항목의 버전을 확인합시다.
이거 두개가 18.1.x 이상이면 사용가능합니다. 그게 아니면 직접 18.1.0 수정한 다음
터미널에서 npm install 누르면 됩니다.

*Redux 셋팅은 
1. 아무데나 store.js 파일을 만들어서 위 코드를 복붙해줍니다. 
저는 src 폴더 안에 만들었음 state들을 보관하는 파일입니다. 
import { configureStore } from '@reduxjs/toolkit'

export default configureStore({
  reducer: { }
}) 


2. index.js 파일가서 Provider 라는 컴포넌트와 아까 작성한 파일을 import 해옵니다. 
그리고 밑에 <Provider store={import해온거}> 이걸로 <App/> 을 감싸면 됩니다. 
그럼 이제 <App>과 그 모든 자식컴포넌트들은 store.js에 있던 state를 맘대로 꺼내쓸 수 있습니다.
import { Provider } from "react-redux";
import store from './store.js'

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
); 

17강 Redux 2 : store에 state 보관하고 쓰는 법

*Redux store에 state 보관하는 법 
저번시간에 만들어둔 store.js 파일 열어서 이렇게 코드짜면 state 하나 만들 수 있습니다.
step 1. createSlice( ) 로 state 만들고
step 2. configureStore( ) 안에 등록하면 됩니다.

import { configureStore, createSlice } from '@reduxjs/toolkit'

let user = createSlice({
  name : 'user',
  initialState : 'kim'
})

export default configureStore({
  reducer: {
    user : user.reducer
  }
}) 
1. createSlice( ) 상단에서 import 해온 다음에 
{ name : 'state이름', initialState : 'state값' } 이거 넣으면 state 하나 생성가능합니다. 
(createSlice( ) 는 useState( ) 와 용도가 비슷하다고 보면 됩니다)

2. state 등록은 configureStore( ) 안에 하면 됩니다.
{ 작명 : createSlice만든거.reducer } 이러면 등록 끝입니다. 
여기 등록한 state는 모든 컴포넌트가 자유롭게 사용가능합니다. 

*Redux store에 있던 state 가져다쓰는 법
(Cart.js)
import { useSelector } from "react-redux"

function Cart(){
  let a = useSelector((state) => { return state } )
  console.log(a)

  return (생략)
}
아무 컴포넌트에서 useSelector((state) => { return state } ) 쓰면 store에 있던 모든 state가 그 자리에 남습니다. 
변수에 저장해서 진짜로 출력해보십시오. 
{ user : 'kim' } 이런거 출력될듯

*let a = useSelector((state) => state.user ) 
이런 식으로 쓰면 좀 더 편리할 수도 있습니다.

*Redux 편하니까 맨날 쓰면 되겠네요
간단한거 만들 때 컴포넌트가 몇개 없을 때 
이럴 땐 그냥 props 쓰는게 더 코드가 짧습니다. 

18강 Redux 3 : store의 state 변경하는 법
*반복문 사용시 key값 써주면 좋다
(store.js)
let cart = createSlice({
    name : 'cart',
    initialState : [
        {id : 0, name : 'White and Black', count : 2},
        {id : 2, name : 'Grey Yordan', count : 1}
      ]
})
(Cart.js)
  {
       state.cart.map((a, i)=> 
       <tr key={i}>
           <td>1</td>
           <td>{state.cart[i].name}</td>
           <td>{state.cart[i].count}</td>
           <td>안녕</td>
           </tr>
       ) }

*store의 state 변경하는 법 
1. store.js 안에 state 수정해주는 함수부터 만듭니다. 

let user = createSlice({
  name : 'user',
  initialState : 'kim',
  reducers : {
    changeName(state){
      return 'john ' + state
    }
  }
}) 
slice 안에 reducers : { } 열고 거기 안에 함수 만들면 됩니다.
- 함수 작명 맘대로 합니다.
- 파라미터 하나 작명하면 그건 기존 state가 됩니다.
- return 우측에 새로운 state 입력하면 그걸로 기존 state를 갈아치워줍니다. 
이제 changeName() 쓸 때 마다 'kim' -> 'john kim' 이렇게 변할듯 

2. 다른 곳에서 쓰기좋게 export 해둡니다.
export let { changeName } = user.actions 
이런 코드 store.js 밑에 추가하면 됩니다.
slice이름.actions 라고 적으면 state 변경함수가 전부 그 자리에 출력됩니다.
그걸 변수에 저장했다가 export 하라는 뜻일 뿐임 

3. 원할 때 import 해서 사용합니다. 근데 dispatch() 로 감싸서 써야함 
예를 들어서 Cart.js 에서 버튼같은거 하나 만들고
그 버튼 누르면 state를 'kim' -> 'john kim' 이렇게 변경하고 싶으면

(Cart.js)

import { useDispatch, useSelector } from "react-redux"
import { changeName } from "./../store.js"

(생략) 
<button onClick={()=>{
  dispatch(changeName())
}}>버튼임</button> 
이렇게 코드짜면 됩니다. 

- store.js에서 원하는 state변경함수 가져오면 되고 
- useDispatch 라는 것도 라이브러리에서 가져옵니다.
- 그리고 dispatch( state변경함수() ) 이렇게 감싸서 실행하면 state 진짜로 변경됩니다.  
dispatch로 꼭 감싸야 실행됩니다.

19강 Redux 4 : state가 object/array일 경우 변경하는 법

*redux state가 array/object인 경우 변경하려면 
대충 {name : 'kim', age : 20} 이렇게 생긴 자료를 state로 만들어봅시다. 
근데 저기서 'kim' -> 'park' 이렇게 변경하고 싶으면 state 변경함수 어떻게 만들어야할까요? 

방법1.
let user = createSlice({
  name : 'user',
  initialState : {name : 'kim', age : 20},
  reducers : {
    changeName(state){
      return {name : 'park', age : 20}
    }
  }
}) 

방법2.
let user = createSlice({
  name : 'user',
  initialState : {name : 'kim', age : 20},
  reducers : {
    changeName(state){
      state.name = 'park'
    }
  }
}) 

*state 변경함수가 여러개 필요하면 state변경함수에도 파라미터문법 사용가능

let user = createSlice({
  name : 'user',
  initialState : {name : 'kim', age : 20},
  reducers : {
    increase(state, a){
      state.age += a.payload
    }
  }
}) 
state변경함수의 둘째 파라미터를 작명하면 이제 
increase(10)
increase(100)
이런 식으로 파라미터입력을 해서 함수사용이 가능합니다.
파라미터자리에 넣은 자료들은 a.payload 하면 나옵니다.
그래서 위처럼 코드 작성해놓으면
increase(10) 이거 실행하면 +10 됩니다.
increase(100) 이거 실행하면 +100 됩니다. 
여기서도 파라미터문법 이용하면 비슷한 함수들은 여러개 만들 필요없습니다. 
진짜 잘되는지 확인하려면 가져다가 써봅시다.

(참고)
- a 말고 action 이런 식으로 작명 많이 합니다. 
- action.type 하면 state변경함수 이름이 나오고
- action.payload 하면 파라미터가 나옵니다. 

  {state.user.name} {state.user.age}의 장바구니
    <button onClick={()=>dispatch(increase(100))}>버튼</button>


*파일 분할은
코드가 길어서 보기싫으면 코드 덩어리들을 다른 파일로 빼면 됩니다. 
그래서 강의에선 let user 변수와 state변경함수 export 부분을
store폴더/userSlice.js로 빼봤습니다.