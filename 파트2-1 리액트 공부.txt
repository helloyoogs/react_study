## 1강 새로운 프로젝트 생성 & Bootstrap 사용하기
import { Container,Navbar,Nav } from 'react-bootstrap';

function App() {
  return (
    <div className="App">
      <Navbar bg="dark" variant="dark">
        <Container>
          <Navbar.Brand href="#home">Navbar</Navbar.Brand>
          <Nav className="me-auto">
            <Nav.Link href="#home">Home</Nav.Link>
            <Nav.Link href="#features">Features</Nav.Link>
            <Nav.Link href="#pricing">Pricing</Nav.Link>
          </Nav>
        </Container>
      </Navbar>
    </div>
  );
}
대문자로 시작하는 컴포넌트이름은 상단에 저렇게 import 해야합니다. 
.찍힌건 안해도 됨

## 2강 이미지 넣는 법 & public 폴더 이용하기

*html 안에서 src 폴더의 이미지를 넣고 싶으면 
import bg from './bg.png'

function App(){
  return (
    <div>
      <div className="main-bg" style={{ backgroundImage : 'url(' + bg + ')' }}></div>
    </div>
  )
}

*public 폴더에 있는 이미지 사용할 땐

<img src="/logo192.png" /> 
codingapple.com/어쩌구/ 경로에 배포하면->
<img src={process.env.PUBLIC_URL + '/logo192.png'} /> 

3강 코드 길어지면 import export 하면 됩니다
*상품데이터도 다른 파일에 저장해두자
(data.js 파일)
let data = 위에있던 긴 array 자료;
export default data

(App.js 파일)
import data from './data.js';
function App(){
  let [shoes] = useState(data);
}

4강 저번시간 숙제 해설 (Card 컴포넌트 만들기)
방법1. 
<Card shoes={shoes[0]} i={1} />
<Card shoes={shoes[1]} i={2} />
<Card shoes={shoes[2]} i={3} />
function Card(props){
  return (
    <div className="col-md-4">
      <img src={'https://codingapple1.github.io/shop/shoes' + props.i + '.jpg'} width="80%" />
      <h4>{ props.shoes.title }</h4>
      <p>{ props.shoes.price }</p>
    </div>
  )
}
방법2.
    <Card shoes={shoes}></Card>   
function Card(props){
  return(
  props.shoes.map(function (a, i) {
    return (
      <div className="col-md-4">
        <img src={props.shoes[i].img} width="80%" />
        <h4>{props.shoes[i].title}</h4>
        <p>{props.shoes[i].price}</p>
      </div>
    )
  })
  )
}
방법3.
 {
            shoes.map((a,i)=>{
              return(
                <Card shoes={shoes[i]} i={i}></Card>
              )
            })
          }
function Card(props){
  return(
      <div className="col-md-4">
        <img src={'https://codingapple1.github.io/shop/shoes'+(props.i+1)+'.jpg'} width="80%" />
        <h4>{props.shoes.title}</h4>
        <p>{props.shoes.price}</p>
      </div>
  )
}

5강 리액트 라우터 1 : 셋팅이랑 기본 라우팅
터미널 열어서 npm install react-router-dom@6 입력해서 설치
셋팅은 index.js 파일로 가서 
import { BrowserRouter } from "react-router-dom";
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
      <BrowserRouter>
        <App />
      </BrowserRouter>
  </React.StrictMode>
); 

*라우터로 페이지 나누는 법 
 (App.js)
import { Routes, Route, Link } from 'react-router-dom'
function App(){
  return (
    (생략)
    <Routes>
      <Route path="/detail" element={ <div>상세페이지임</div> } />
      <Route path="/about" element={ <div>어바웃페이지임</div> } />
    </Routes>
  )
}

6강 리액트 라우터 2 : navigate, nested routes, outlet
*외부 js import해서 사용하기
function Detail(){
  return (
    저번강의에서 준 html 코드
  )
}
export default Detail

import Detail from './routes/Detail.js'

function App(){
  return (
    (생략)
    <Route path="/detail" element={ <Detail/> } />
  )
}

*페이지 이동기능을 만들고 싶으면 useNavigate() 씁니다.

페이지 이동은 Link 써도 된다고 했는데 그게 못생겼으면 이거 쓰면 됩니다. 

function App(){
  let navigate = useNavigate()
  
  return (
    (생략)
    <button onClick={()=>{ navigate('/detail') }}>이동버튼</button>
  )
}
useNavigate() 쓰면 그 자리에 유용한 함수가 남습니다.
페이지 이동시켜주는 함수입니다.
그럼 이제 navigate('/detail') 이런 코드가 실행되면 /detail 페이지로 이동가능합니다.
navigate(2) 숫자넣으면 앞으로가기, 뒤로가기 기능개발도 가능합니다.
-1 넣으면 뒤로 1번 가기
2 넣으면 앞으로 2번 가기 기능입니다. 

 
*404페이지는
유저가 이상한 경로로 접속했을 때 "없는 페이지입니다" 이런거 보여주고 싶으면
 <Route path="*" element={ <div>없는페이지임</div> } />
<Route path="*"> 하나 맨 밑에 만들어두면 됩니다.
* 경로는 모든 경로를 뜻해서
위에 만들어둔 /detail 이런게 아닌 이상한 페이지 접속시 * 경로로 안내해줍니다. 

*서브경로 만들 수 있는 nested routes
/about/member로 접속하면 회사멤버 소개하는 페이지
/about/location으로 접속하면 회사위치 소개하는 페이지
를 만들고 싶으면?
방법1.
<Route path="/about/member" element={ <div>멤버들</div> } />
<Route path="/about/location" element={ <div>회사위치</div> } />
방법2.
<Route path="/about" element={ <About/> } >  
  <Route path="member" element={ <div>멤버들</div> } />
  <Route path="location" element={ <div>회사위치</div> } />
</Route>

<Route>안에 <Route>를 넣을 수 있는데 이걸 Nested routes 라고 부릅니다.
저렇게 쓰면
/about/member로 접속시 <About> &<div>멤버들</div> 을 보여줍니다.
/about/location으로 접속시 <About> & <div>회사위치</div> 을 보여줍니다.

*nested routes 사용 시 주의할 점
<Route path="/about" element={ <About/> } >  
  <Route path="member" element={ <div>멤버들</div> } />
  <Route path="location" element={ <div>회사위치</div> } />
</Route>
function About(){
  return (
    <div>
      <h4>about페이지임</h4>
      <Outlet></Outlet>
    </div>
  )
}
위에서 import해온 <Outlet>은 nested routes안의 element들을 어디에 보여줄지 표기하는 곳입니다. 
그래서 이렇게 해두면 
/about/member로 접속시 <Outlet>자리에 아까의 <div> 박스들이 잘 보입니다. 
그래서 유사한 서브페이지들이 많이 필요하다면 이렇게 만들어도 됩니다.

7강 리액트 라우터 3 : URL 파라미터로 상세페이지 100개 만들기

<Route path="/detail/:id" element={ <Detail shoes={shoes}/> }/>
페이지를 여러개 만들고 싶으면 URL 파라미터라는 문법을 사용가능합니다. 
path 작명할 때 /:어쩌구 이렇게 사용하면 "아무 문자"를 뜻합니다.
그래서 위의 <Route>는 누군가 주소창에 /detail/아무거나 입력했을 때
<Detail> 컴포넌트 보여달라는 뜻입니다.

/detail/0 /detail/1 /detail/2
이렇게 접속해도 <Detail> 컴포넌트 잘 보여줄 수 있습니다. 

*현재url파라미터에 입력된숫자
import { useParams } from 'react-router-dom'
function Detail(){
  let {id} = useParams();
  console.log(id)
  return (
    <div className="container>
      <div className="row">
        <div className="col-md-6">
          <img src={props.shoes[id].img} width="100%" />
                </div>
                <div className="col-md-6">
                    <h4 className="pt-5">{props.shoes[id].title}</h4>
                    <p>{props.shoes[id].content}</p>
                    <p>{props.shoes[id].price}원</p>
          <button className="btn btn-danger">주문하기</button>
      </div>
    </div>
  </div>
  )
}
useParams() 라는 함수를 상단에서 import 해오면 쓸 수 있는데
이거 쓰면 현재 /:url파라미터 자리에 유저가 입력한 값을 가져올 수 있습니다.
변수에 저장해서 쓰든가 하면 됩니다.

*가나다순 정렬등 정렬이 바뀌면 id값이 바껴서
js에 있는 고유 id값을 사용하고프면
(data.js)
[
  {
    id : 0, ->이걸 고유로 사용하고싶으면
    title : "White and Black",
    content : "Born in France",
    price : 120000
  },
] 

(Detail.js)
function Detail(props){
  let { id } = useParams();
  let 찾은상품 = props.shoes.find(function(x){
    return x.id == id  ->이런식으로 js코드 짜면 됨
  });
  return (
    <div className="container">
      <div className="row">
        <div className="col-md-6">
             <img src={찾은상품.img} width="100%" />
        </div>
        <div className="col-md-6 mt-4">
          <h4 className="pt-5">{찾은상품.title}</h4>
          <p>{찾은상품.content}</p>
          <p>{찾은상품.price}원</p>
          <button className="btn btn-danger">주문하기</button> 
        </div>
      </div>
  </div>  
  )
};
export default Detail 

8강 styled-components 쓰면 CSS 파일 없어도 되는데
장점1. CSS 파일 오픈할 필요없이 JS 파일에서 바로 스타일넣을 수 있습니다.
장점2. 여기 적은 스타일이 다른 JS 파일로 오염되지 않습니다. 원래 그냥 CSS파일은 오염됩니다.
장점3. 페이지 로딩시간 단축됩니다.

단점1. JS 파일이 매우 복잡 styled 인지 아니면 일반 컴포넌트인지 구분도 어렵.
단점2. 중복 스타일은 컴포넌트간 import할텐데 css다를게 없음
단점3. 디자이너가 styled-components 문법을 모른다면 협업시 불편.
그 사람이 CSS로 짠걸 styled-components 문법으로 다시 바꾸거나 그런 작업이 필요.

npm install styled-components
import styled from 'styled-components'

*styled-components 기본적인 사용법 
import styled from 'styled-components';
let Box = styled.div`
  padding : 20px;
  color : grey
`;
let YellowBtn = styled.button`
  background : yellow;
  color : black;
  padding : 10px;
`;
function Detail(){
  return (
    <div>
      <Box>
        <YellowBtn>버튼임</YellowBtn>
      </Box>
    </div>
  )
}
*컴포넌트명.module.css로 쓰면 일반 CSS 파일도 오염방지 가능
*추가 문법 : props로 재활용가능
import styled from 'styled-components';
let YellowBtn = styled.button`
  background : ${ props => props.bg };
  color : black;
  padding : 10px;
`;
function Detail(){
  return (
    <div>
        <YellowBtn bg="orange">오렌지색 버튼임</YellowBtn>
        <YellowBtn bg="blue">파란색 버튼임</YellowBtn>
    </div>
  )
}
*자바스크립트 적는 공간이다보니까 이런 식의 스타일 프로그래밍도 가능합니다. 
let YellowBtn = styled.button` 
  background : ${ props => props.bg };
  color : ${ props => props.bg == 'blue' ? 'white' : 'black' };
  padding : 10px; 
`; 

9강 Lifecycle과 useEffect 1
컴포넌트는
1. 생성이 될 수도 있고 (전문용어로 mount)-페이지장착
2. 재렌더링이 될 수도 있고 (전문용어로 update)-가끔 업데이트
3. 삭제가 될 수도 있습니다. (전문용어로 unmount)-필요없으면 제거

*옛날 React에서 Lifecycle hook 쓰는 법
class Detail2 extends React.Component {
  componentDidMount(){
    //Detail2 컴포넌트가 로드되고나서 실행할 코드
  }
  componentDidUpdate(){
    //Detail2 컴포넌트가 업데이트 되고나서 실행할 코드
  }
  componentWillUnmount(){
    //Detail2 컴포넌트가 삭제되기전에 실행할 코드
  }
}
*요즘 React에서 Lifecycle hook 쓰는 법
import {useState, useEffect} from 'react';
function Detail(){
  useEffect(()=>{
    //여기적은 코드는 컴포넌트 로드 & 업데이트 마다 실행됨(mount&update)
  });
  return (생략)
}

*useEffect 사용하는 곳
오래걸리는 반복연산, 서버에서 데이터가져오는 작업, 타이머 장착하는거

10강 Lifecycle과 useEffect 2
*Detail 페이지 접속 후 2초 후에 저걸 안보이게 처리
function Detail(){
  let [alert, setAlert] = useState(true)
  useEffect(()=>{
    setTimeout(()=>{ setAlert(false) }, 2000)
  }, []) -> [] 쓰면 더 정확
  return (
  {
    alert == true
    ? <div className="alert alert-warning">
        2초이내 구매시 할인
      </div>
    : null
  }
  )
}
*useEffect 조건1,2
조건1. useEffect(()=>{ 
  return ()=>{
    실행할코드
  }
}, []) -> 이러면 컴포넌트 unmount시 1회 실행.
조건2. useEffect(()=>{ 
  실행할코드
}, [state1]) -> 이러면 state1이 변경될 때만 실행.

*clean up function
useEffect에서 rerturn 사용시 이런 식으로 사용(반복실행되는 버그,충돌방지)
useEffect(()=>{ 
  let a = setTimeout(()=>{ setAlert(false) }, 2000)
  return ()=>{
    clearTimeout(a)
  }
}, [])

*useEffect 총정리
1. 재렌더링마다 코드를 실행
useEffect(()=>{ 실행할코드 })
2.mount시 1회 실행
useEffect(()=>{ 실행할코드 }, [])
3.unmount시 1회 실행
useEffect(()=>{ 
  return ()=>{
    실행할코드
  }
})
4.useEffect 실행 전에 뭔가 실행하려면 언제나 return()=>{}
useEffect(()=>{ return ()=>{ 실행할코드 }}, [])
5.state1이 변경될 때만 실행
useEffect(()=>{ return ()=>{ 실행할코드 }}, [state1])
