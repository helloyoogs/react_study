1강 새로운 프로젝트 생성 & Bootstrap 사용하기
import { Container,Navbar,Nav } from 'react-bootstrap';

function App() {
  return (
    <div className="App">
      <Navbar bg="dark" variant="dark">
        <Container>
          <Navbar.Brand href="#home">Navbar</Navbar.Brand>
          <Nav className="me-auto">
            <Nav.Link href="#home">Home</Nav.Link>
            <Nav.Link href="#features">Features</Nav.Link>
            <Nav.Link href="#pricing">Pricing</Nav.Link>
          </Nav>
        </Container>
      </Navbar>
    </div>
  );
}
대문자로 시작하는 컴포넌트이름은 상단에 저렇게 import 해야합니다. 
.찍힌건 안해도 됨

2강 이미지 넣는 법 & public 폴더 이용하기

*html 안에서 src 폴더의 이미지를 넣고 싶으면 
import bg from './bg.png'

function App(){
  return (
    <div>
      <div className="main-bg" style={{ backgroundImage : 'url(' + bg + ')' }}></div>
    </div>
  )
}

*public 폴더에 있는 이미지 사용할 땐

<img src="/logo192.png" /> 
codingapple.com/어쩌구/ 경로에 배포하면->
<img src={process.env.PUBLIC_URL + '/logo192.png'} /> 

3강 코드 길어지면 import export 하면 됩니다
*상품데이터도 다른 파일에 저장해두자
(data.js 파일)
let data = 위에있던 긴 array 자료;
export default data

(App.js 파일)
import data from './data.js';
function App(){
  let [shoes] = useState(data);
}

4강 저번시간 숙제 해설 (Card 컴포넌트 만들기)
방법1. 
<Card shoes={shoes[0]} i={1} />
<Card shoes={shoes[1]} i={2} />
<Card shoes={shoes[2]} i={3} />
function Card(props){
  return (
    <div className="col-md-4">
      <img src={'https://codingapple1.github.io/shop/shoes' + props.i + '.jpg'} width="80%" />
      <h4>{ props.shoes.title }</h4>
      <p>{ props.shoes.price }</p>
    </div>
  )
}
방법2.
    <Card shoes={shoes}></Card>   
function Card(props){
  return(
  props.shoes.map(function (a, i) {
    return (
      <div className="col-md-4">
        <img src={props.shoes[i].img} width="80%" />
        <h4>{props.shoes[i].title}</h4>
        <p>{props.shoes[i].price}</p>
      </div>
    )
  })
  )
}
방법3.
 {
            shoes.map((a,i)=>{
              return(
                <Card shoes={shoes[i]} i={i}></Card>
              )
            })
          }
function Card(props){
  return(
      <div className="col-md-4">
        <img src={'https://codingapple1.github.io/shop/shoes'+(props.i+1)+'.jpg'} width="80%" />
        <h4>{props.shoes.title}</h4>
        <p>{props.shoes.price}</p>
      </div>
  )
}

5강 리액트 라우터 1 : 셋팅이랑 기본 라우팅
터미널 열어서 npm install react-router-dom@6 입력해서 설치
셋팅은 index.js 파일로 가서 
import { BrowserRouter } from "react-router-dom";
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
      <BrowserRouter>
        <App />
      </BrowserRouter>
  </React.StrictMode>
); 

*라우터로 페이지 나누는 법 
 (App.js)
import { Routes, Route, Link } from 'react-router-dom'
function App(){
  return (
    (생략)
    <Routes>
      <Route path="/detail" element={ <div>상세페이지임</div> } />
      <Route path="/about" element={ <div>어바웃페이지임</div> } />
    </Routes>
  )
}

6강 리액트 라우터 2 : navigate, nested routes, outlet
*외부 js import해서 사용하기
function Detail(){
  return (
    저번강의에서 준 html 코드
  )
}
export default Detail

import Detail from './routes/Detail.js'

function App(){
  return (
    (생략)
    <Route path="/detail" element={ <Detail/> } />
  )
}

*페이지 이동기능을 만들고 싶으면 useNavigate() 씁니다.

페이지 이동은 Link 써도 된다고 했는데 그게 못생겼으면 이거 쓰면 됩니다. 

function App(){
  let navigate = useNavigate()
  
  return (
    (생략)
    <button onClick={()=>{ navigate('/detail') }}>이동버튼</button>
  )
}
useNavigate() 쓰면 그 자리에 유용한 함수가 남습니다.
페이지 이동시켜주는 함수입니다.
그럼 이제 navigate('/detail') 이런 코드가 실행되면 /detail 페이지로 이동가능합니다.
navigate(2) 숫자넣으면 앞으로가기, 뒤로가기 기능개발도 가능합니다.
-1 넣으면 뒤로 1번 가기
2 넣으면 앞으로 2번 가기 기능입니다. 

 
*404페이지는
유저가 이상한 경로로 접속했을 때 "없는 페이지입니다" 이런거 보여주고 싶으면
 <Route path="*" element={ <div>없는페이지임</div> } />
<Route path="*"> 하나 맨 밑에 만들어두면 됩니다.
* 경로는 모든 경로를 뜻해서
위에 만들어둔 /detail 이런게 아닌 이상한 페이지 접속시 * 경로로 안내해줍니다. 

*서브경로 만들 수 있는 nested routes
/about/member로 접속하면 회사멤버 소개하는 페이지
/about/location으로 접속하면 회사위치 소개하는 페이지
를 만들고 싶으면?
방법1.
<Route path="/about/member" element={ <div>멤버들</div> } />
<Route path="/about/location" element={ <div>회사위치</div> } />
방법2.
<Route path="/about" element={ <About/> } >  
  <Route path="member" element={ <div>멤버들</div> } />
  <Route path="location" element={ <div>회사위치</div> } />
</Route>

<Route>안에 <Route>를 넣을 수 있는데 이걸 Nested routes 라고 부릅니다.
저렇게 쓰면
/about/member로 접속시 <About> &<div>멤버들</div> 을 보여줍니다.
/about/location으로 접속시 <About> & <div>회사위치</div> 을 보여줍니다.

*nested routes 사용 시 주의할 점
<Route path="/about" element={ <About/> } >  
  <Route path="member" element={ <div>멤버들</div> } />
  <Route path="location" element={ <div>회사위치</div> } />
</Route>
function About(){
  return (
    <div>
      <h4>about페이지임</h4>
      <Outlet></Outlet>
    </div>
  )
}
위에서 import해온 <Outlet>은 nested routes안의 element들을 어디에 보여줄지 표기하는 곳입니다. 
그래서 이렇게 해두면 
/about/member로 접속시 <Outlet>자리에 아까의 <div> 박스들이 잘 보입니다. 
그래서 유사한 서브페이지들이 많이 필요하다면 이렇게 만들어도 됩니다.

7강 리액트 라우터 3 : URL 파라미터로 상세페이지 100개 만들기

<Route path="/detail/:id" element={ <Detail shoes={shoes}/> }/>
페이지를 여러개 만들고 싶으면 URL 파라미터라는 문법을 사용가능합니다. 
path 작명할 때 /:어쩌구 이렇게 사용하면 "아무 문자"를 뜻합니다.
그래서 위의 <Route>는 누군가 주소창에 /detail/아무거나 입력했을 때
<Detail> 컴포넌트 보여달라는 뜻입니다.

/detail/0 /detail/1 /detail/2
이렇게 접속해도 <Detail> 컴포넌트 잘 보여줄 수 있습니다. 

*현재url파라미터에 입력된숫자
import { useParams } from 'react-router-dom'
function Detail(){
  let {id} = useParams();
  console.log(id)
  return (
    <div className="container>
      <div className="row">
        <div className="col-md-6">
          <img src={props.shoes[id].img} width="100%" />
                </div>
                <div className="col-md-6">
                    <h4 className="pt-5">{props.shoes[id].title}</h4>
                    <p>{props.shoes[id].content}</p>
                    <p>{props.shoes[id].price}원</p>
          <button className="btn btn-danger">주문하기</button>
      </div>
    </div>
  </div>
  )
}
useParams() 라는 함수를 상단에서 import 해오면 쓸 수 있는데
이거 쓰면 현재 /:url파라미터 자리에 유저가 입력한 값을 가져올 수 있습니다.
변수에 저장해서 쓰든가 하면 됩니다.

*가나다순 정렬등 정렬이 바뀌면 id값이 바껴서
js에 있는 고유 id값을 사용하고프면
(data.js)
[
  {
    id : 0, ->이걸 고유로 사용하고싶으면
    title : "White and Black",
    content : "Born in France",
    price : 120000
  },
] 

(Detail.js)
function Detail(props){
  let { id } = useParams();
  let 찾은상품 = props.shoes.find(function(x){
    return x.id == id  ->이런식으로 js코드 짜면 됨
  });
  return (
    <div className="container">
      <div className="row">
        <div className="col-md-6">
             <img src={찾은상품.img} width="100%" />
        </div>
        <div className="col-md-6 mt-4">
          <h4 className="pt-5">{찾은상품.title}</h4>
          <p>{찾은상품.content}</p>
          <p>{찾은상품.price}원</p>
          <button className="btn btn-danger">주문하기</button> 
        </div>
      </div>
  </div>  
  )
};
export default Detail 

8강 styled-components 쓰면 CSS 파일 없어도 되는데
장점1. CSS 파일 오픈할 필요없이 JS 파일에서 바로 스타일넣을 수 있습니다.
장점2. 여기 적은 스타일이 다른 JS 파일로 오염되지 않습니다. 원래 그냥 CSS파일은 오염됩니다.
장점3. 페이지 로딩시간 단축됩니다.

단점1. JS 파일이 매우 복잡 styled 인지 아니면 일반 컴포넌트인지 구분도 어렵.
단점2. 중복 스타일은 컴포넌트간 import할텐데 css다를게 없음
단점3. 디자이너가 styled-components 문법을 모른다면 협업시 불편.
그 사람이 CSS로 짠걸 styled-components 문법으로 다시 바꾸거나 그런 작업이 필요.

npm install styled-components
import styled from 'styled-components'

*styled-components 기본적인 사용법 
import styled from 'styled-components';
let Box = styled.div`
  padding : 20px;
  color : grey
`;
let YellowBtn = styled.button`
  background : yellow;
  color : black;
  padding : 10px;
`;
function Detail(){
  return (
    <div>
      <Box>
        <YellowBtn>버튼임</YellowBtn>
      </Box>
    </div>
  )
}
*컴포넌트명.module.css로 쓰면 일반 CSS 파일도 오염방지 가능
*추가 문법 : props로 재활용가능
import styled from 'styled-components';
let YellowBtn = styled.button`
  background : ${ props => props.bg };
  color : black;
  padding : 10px;
`;
function Detail(){
  return (
    <div>
        <YellowBtn bg="orange">오렌지색 버튼임</YellowBtn>
        <YellowBtn bg="blue">파란색 버튼임</YellowBtn>
    </div>
  )
}
*자바스크립트 적는 공간이다보니까 이런 식의 스타일 프로그래밍도 가능합니다. 
let YellowBtn = styled.button` 
  background : ${ props => props.bg };
  color : ${ props => props.bg == 'blue' ? 'white' : 'black' };
  padding : 10px; 
`; 

9강 Lifecycle과 useEffect 1
컴포넌트는
1. 생성이 될 수도 있고 (전문용어로 mount)-페이지장착
2. 재렌더링이 될 수도 있고 (전문용어로 update)-가끔 업데이트
3. 삭제가 될 수도 있습니다. (전문용어로 unmount)-필요없으면 제거

*옛날 React에서 Lifecycle hook 쓰는 법
class Detail2 extends React.Component {
  componentDidMount(){
    //Detail2 컴포넌트가 로드되고나서 실행할 코드
  }
  componentDidUpdate(){
    //Detail2 컴포넌트가 업데이트 되고나서 실행할 코드
  }
  componentWillUnmount(){
    //Detail2 컴포넌트가 삭제되기전에 실행할 코드
  }
}
*요즘 React에서 Lifecycle hook 쓰는 법
import {useState, useEffect} from 'react';
function Detail(){
  useEffect(()=>{
    //여기적은 코드는 컴포넌트 로드 & 업데이트 마다 실행됨(mount&update)
  });
  return (생략)
}

*useEffect 사용하는 곳
오래걸리는 반복연산, 서버에서 데이터가져오는 작업, 타이머 장착하는거

10강 Lifecycle과 useEffect 2
*Detail 페이지 접속 후 2초 후에 저걸 안보이게 처리
function Detail(){
  let [alert, setAlert] = useState(true)
  useEffect(()=>{
    setTimeout(()=>{ setAlert(false) }, 2000)
  }, []) -> [] 쓰면 더 정확
  return (
  {
    alert == true
    ? <div className="alert alert-warning">
        2초이내 구매시 할인
      </div>
    : null
  }
  )
}
*useEffect 조건1,2
조건1. useEffect(()=>{ 
  return ()=>{
    실행할코드
  }
}, []) -> 이러면 컴포넌트 unmount시 1회 실행.
조건2. useEffect(()=>{ 
  실행할코드
}, [state1]) -> 이러면 state1이 변경될 때만 실행.

*clean up function
useEffect에서 rerturn 사용시 이런 식으로 사용(반복실행되는 버그,충돌방지)
useEffect(()=>{ 
  let a = setTimeout(()=>{ setAlert(false) }, 2000)
  return ()=>{
    clearTimeout(a)
  }
}, [])

*useEffect 총정리
1. 재렌더링마다 코드를 실행
useEffect(()=>{ 실행할코드 })
2.mount시 1회 실행
useEffect(()=>{ 실행할코드 }, [])
3.unmount시 1회 실행
useEffect(()=>{ 
  return ()=>{
    실행할코드
  }
})
4.useEffect 실행 전에 뭔가 실행하려면 언제나 return()=>{}
useEffect(()=>{ return ()=>{ 실행할코드 }}, [])
5.state1이 변경될 때만 실행
useEffect(()=>{ return ()=>{ 실행할코드 }}, [state1])

11강 리액트에서 서버와 통신하려면 ajax 1

*AJAX란? 
서버에 GET, POST 요청을 할 때 새로고침 없이 데이터를 주고받을 수 있게 도와주는
간단한 브라우저 기능
*AJAX로 GET/POST요청하려면 방법 3개 중 택1 하면 됩니다.
1. XMLHttpRequest라는 옛날 문법 쓰기
2. fetch() 라는 최신 문법 쓰기
3. axios 같은 외부 라이브러리 쓰기(많이 사용) npm install axios 

*ajax axios 사용법
import axios from 'axios'

function App(){
  return (
    <button onClick={()=>{
      axios.get('https://codingapple1.github.io/shop/data2.json').then((결과)=>{
        console.log(결과.data) ->성공할 때
      })
      .catch(()=>{
        console.log('실패함') ->실패할 때
      })
    }}>버튼</button>
  )
}
12강 리액트에서 서버와 통신하려면 ajax 2 : post, fetch
*POST요청 하는 법
axios.post('URL', {name : 'kim'})
*동시에 AJAX 요청 여러개 날리려면
Promise.all( [axios.get('URL1'), axios.get('URL2')] )
*자바스크립트 문법인 fetch() 를 이용해도 GET/POST 요청이 가능
fetch('URL').then(결과 => 결과.json()).then((결과) => { console.log(결과) } )

13강 리액트에서 탭 UI 만들기
*일반 if 조건문 사용하기
function Detail(){
  let [탭, 탭변경] = useState(0)
  return (
    <TabContent/>
  )
}
function TabContent(){
  if (탭 === 0){
    <div>내용0</div>
  }
  if (탭 === 1){
    <div>내용1</div>
  }
  if (탭 === 2){
    <div>내용2</div>
  }
}
*if문 없이 tab기능 만들기
function TabContent(props){
  return [ <div>내용0</div>, <div>내용1</div>, <div>내용2</div> ][props.탭]
}
 props.탭이 0이면 저 긴 array자료에서 0번 자료를 꺼내줄테니까

*참고사항 : props 쉽게 쓰고 싶으면
function TabContent({탭}){
  return [ <div>내용0</div>, <div>내용1</div>, <div>내용2</div> ][탭]
}
자식컴포넌트에서 props라고 파라미터를 하나만 작명하는게 아니라
{state1이름, state2이름 ... }이렇게 작성하면
props.state1이름 이렇게 쓸 필요가 없어집니다. 

14강 멋있게 컴포넌트 전환 애니메이션 주는 법 (transition)
.start {
  opacity : 0
}
.end {
  opacity : 1;
  transition : opacity 0.5s;
}
function TabContent({탭}){

  let [fade, setFade] = useState('')

  useEffect(()=>{
    setTImeout(()=>{ setFade('end') }, 100)
  return ()=>{
    setFade('')
  }
  }, [탭])

  return (
    <div className={'start ' + fade}>
      { [<div>내용0</div>, <div>내용1</div>, <div>내용2</div>][탭] }
    </div>
  )
}
->setTimeout 왜 씁니까
automatic batch 라는 기능이 생겼습니다.
state 변경함수들이 연달아서 여러개 처리되어야한다면 
state 변경함수를 다 처리하고 마지막에 한 번만 재렌더링됩니다. 
그래서 'end' 로 변경하는거랑 ' ' 이걸로 변경하는거랑 약간 시간차를 뒀습니다.
찾아보면 setTimeout 말고 flushSync() 이런거 써도 될 것 같기도 합니다.
automatic batching을 막아줍니다.

15강 props 싫으면 Context API 써도 됩니다
(자식의 자식도 props없이 사용가능)
ex) let {재고} = useContext(Context1)만 넣으면 props없이 어디서든 사용가능

*props 여러 개 쓰기(자식의 자식 전송 상황)
 <TabContent 탭={탭} shoes={props.shoes} />

function TabContent({탭,shoes}){
    (생략)
  }

*Context API 문법으로 props 없이 state 공유하기
1. 일단 createContext() 함수를 가져와서 context를 하나 만들어줍니다.
2. 아까만든 Context1로 원하는 곳을 감싸고 공유를 원하는 state를 value 안에 다 적으면 됩니다.
그럼 이제 Context1로 감싼 모든 컴포넌트와 그 자식컴포넌트는 
state를 props 전송없이 직접 사용가능합니다.
(App.js)

export let 재고context = React.createContext();

function App(){
  let [재고, 재고변경] = useState([10,11,12]);

  return (
    <Context1.Provider value={ {재고, shoes} }>
      <Detail shoes={shoes}/>
    </Context1.Provider>
    
  )
}
*Context 안에 있던 state 사용하려면
1. 만들어둔 Context를 import 해옵니다.
2. useContext() 안에 넣습니다. 
그럼 이제 그 자리에 공유했던 state가 전부 남는데 그거 쓰면 됩니다. 
(Detail.js)

import {useState, useEffect, useContext} from 'react';
import {Context1} from './../App.js';

function Detail(){
  let {재고} = useContext(Context1)

  return (
    <div>{재고}</div>
  )
}
Q. props보다 불편한데요?
A. 그럼 props를 씁시다. 이건 중첩해서 사용한 컴포넌트가 많을 때 편리한 문법입니다.

*Context API 단점
잘 안쓰는 이유는 
1. state 변경시 쓸데없는 컴포넌트까지 전부 재렌더링이 되고 
2. useContext() 를 쓰고 있는 컴포넌트는 나중에 다른 파일에서 재사용할 때
Context를 import 하는게 귀찮아질 수 있습니다.
그래서 이것 보다는 redux 같은 외부라이브러리를 많이들 사용합니다.

16강 장바구니 페이지 만들기 & Redux 1 : Redux Toolkit 설치

*Redux 쓰면 뭐가 좋냐면
Redux는 props 없이 state를 공유할 수 있게 도와주는 라이브러리
이거 설치하면 js 파일 하나에 state들을 보관할 수 있는데
그걸 모든 컴포넌트가 직접 꺼내쓸 수 있습니다. 

*Redux 설치는 
npm install @reduxjs/toolkit react-redux
설치 전에 package.json 파일을 열어서 "react" "react-dom" 항목의 버전을 확인합시다.
이거 두개가 18.1.x 이상이면 사용가능합니다. 그게 아니면 직접 18.1.0 수정한 다음
터미널에서 npm install 누르면 됩니다.

*Redux 셋팅은 
1. 아무데나 store.js 파일을 만들어서 위 코드를 복붙해줍니다. 
저는 src 폴더 안에 만들었음 state들을 보관하는 파일입니다. 
import { configureStore } from '@reduxjs/toolkit'

export default configureStore({
  reducer: { }
}) 


2. index.js 파일가서 Provider 라는 컴포넌트와 아까 작성한 파일을 import 해옵니다. 
그리고 밑에 <Provider store={import해온거}> 이걸로 <App/> 을 감싸면 됩니다. 
그럼 이제 <App>과 그 모든 자식컴포넌트들은 store.js에 있던 state를 맘대로 꺼내쓸 수 있습니다.
import { Provider } from "react-redux";
import store from './store.js'

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
); 

17강 Redux 2 : store에 state 보관하고 쓰는 법

*Redux store에 state 보관하는 법 
저번시간에 만들어둔 store.js 파일 열어서 이렇게 코드짜면 state 하나 만들 수 있습니다.
step 1. createSlice( ) 로 state 만들고
step 2. configureStore( ) 안에 등록하면 됩니다.

import { configureStore, createSlice } from '@reduxjs/toolkit'

let user = createSlice({
  name : 'user',
  initialState : 'kim'
})

export default configureStore({
  reducer: {
    user : user.reducer
  }
}) 
1. createSlice( ) 상단에서 import 해온 다음에 
{ name : 'state이름', initialState : 'state값' } 이거 넣으면 state 하나 생성가능합니다. 
(createSlice( ) 는 useState( ) 와 용도가 비슷하다고 보면 됩니다)

2. state 등록은 configureStore( ) 안에 하면 됩니다.
{ 작명 : createSlice만든거.reducer } 이러면 등록 끝입니다. 
여기 등록한 state는 모든 컴포넌트가 자유롭게 사용가능합니다. 

*Redux store에 있던 state 가져다쓰는 법
(Cart.js)
import { useSelector } from "react-redux"

function Cart(){
  let a = useSelector((state) => { return state } )
  console.log(a)

  return (생략)
}
아무 컴포넌트에서 useSelector((state) => { return state } ) 쓰면 store에 있던 모든 state가 그 자리에 남습니다. 
변수에 저장해서 진짜로 출력해보십시오. 
{ user : 'kim' } 이런거 출력될듯

*let a = useSelector((state) => state.user ) 
이런 식으로 쓰면 좀 더 편리할 수도 있습니다.

*Redux 편하니까 맨날 쓰면 되겠네요
간단한거 만들 때 컴포넌트가 몇개 없을 때 
이럴 땐 그냥 props 쓰는게 더 코드가 짧습니다. 

18강 Redux 3 : store의 state 변경하는 법
*반복문 사용시 key값 써주면 좋다
(store.js)
let cart = createSlice({
    name : 'cart',
    initialState : [
        {id : 0, name : 'White and Black', count : 2},
        {id : 2, name : 'Grey Yordan', count : 1}
      ]
})
(Cart.js)
  {
       state.cart.map((a, i)=> 
       <tr key={i}>
           <td>1</td>
           <td>{state.cart[i].name}</td>
           <td>{state.cart[i].count}</td>
           <td>안녕</td>
           </tr>
       ) }

*store의 state 변경하는 법 
1. store.js 안에 state 수정해주는 함수부터 만듭니다. 

let user = createSlice({
  name : 'user',
  initialState : 'kim',
  reducers : {
    changeName(state){
      return 'john ' + state
    }
  }
}) 
slice 안에 reducers : { } 열고 거기 안에 함수 만들면 됩니다.
- 함수 작명 맘대로 합니다.
- 파라미터 하나 작명하면 그건 기존 state가 됩니다.
- return 우측에 새로운 state 입력하면 그걸로 기존 state를 갈아치워줍니다. 
이제 changeName() 쓸 때 마다 'kim' -> 'john kim' 이렇게 변할듯 

2. 다른 곳에서 쓰기좋게 export 해둡니다.
export let { changeName } = user.actions 
이런 코드 store.js 밑에 추가하면 됩니다.
slice이름.actions 라고 적으면 state 변경함수가 전부 그 자리에 출력됩니다.
그걸 변수에 저장했다가 export 하라는 뜻일 뿐임 

3. 원할 때 import 해서 사용합니다. 근데 dispatch() 로 감싸서 써야함 
예를 들어서 Cart.js 에서 버튼같은거 하나 만들고
그 버튼 누르면 state를 'kim' -> 'john kim' 이렇게 변경하고 싶으면

(Cart.js)

import { useDispatch, useSelector } from "react-redux"
import { changeName } from "./../store.js"

(생략) 
<button onClick={()=>{
  dispatch(changeName())
}}>버튼임</button> 
이렇게 코드짜면 됩니다. 

- store.js에서 원하는 state변경함수 가져오면 되고 
- useDispatch 라는 것도 라이브러리에서 가져옵니다.
- 그리고 dispatch( state변경함수() ) 이렇게 감싸서 실행하면 state 진짜로 변경됩니다.  
dispatch로 꼭 감싸야 실행됩니다.

19강 Redux 4 : state가 object/array일 경우 변경하는 법

*redux state가 array/object인 경우 변경하려면 
대충 {name : 'kim', age : 20} 이렇게 생긴 자료를 state로 만들어봅시다. 
근데 저기서 'kim' -> 'park' 이렇게 변경하고 싶으면 state 변경함수 어떻게 만들어야할까요? 

방법1.
let user = createSlice({
  name : 'user',
  initialState : {name : 'kim', age : 20},
  reducers : {
    changeName(state){
      return {name : 'park', age : 20}
    }
  }
}) 

방법2.
let user = createSlice({
  name : 'user',
  initialState : {name : 'kim', age : 20},
  reducers : {
    changeName(state){
      state.name = 'park'
    }
  }
}) 

*state 변경함수가 여러개 필요하면 state변경함수에도 파라미터문법 사용가능

let user = createSlice({
  name : 'user',
  initialState : {name : 'kim', age : 20},
  reducers : {
    increase(state, a){
      state.age += a.payload
    }
  }
}) 
state변경함수의 둘째 파라미터를 작명하면 이제 
increase(10)
increase(100)
이런 식으로 파라미터입력을 해서 함수사용이 가능합니다.
파라미터자리에 넣은 자료들은 a.payload 하면 나옵니다.
그래서 위처럼 코드 작성해놓으면
increase(10) 이거 실행하면 +10 됩니다.
increase(100) 이거 실행하면 +100 됩니다. 
여기서도 파라미터문법 이용하면 비슷한 함수들은 여러개 만들 필요없습니다. 
진짜 잘되는지 확인하려면 가져다가 써봅시다.

(참고)
- a 말고 action 이런 식으로 작명 많이 합니다. 
- action.type 하면 state변경함수 이름이 나오고
- action.payload 하면 파라미터가 나옵니다. 

  {state.user.name} {state.user.age}의 장바구니
    <button onClick={()=>dispatch(increase(100))}>버튼</button>


*파일 분할은
코드가 길어서 보기싫으면 코드 덩어리들을 다른 파일로 빼면 됩니다. 
그래서 강의에선 let user 변수와 state변경함수 export 부분을
store폴더/userSlice.js로 빼봤습니다.

21강 리액트에서 자주쓰는 if문 작성패턴 5개
1. 컴포넌트 안에서 쓰는 if/else
function Component() {
  if ( true ) {
    return <p>참이면 보여줄 HTML</p>;
  } else {
    return null;
  }
}
(참고) else 생략이 가능합니다
function Component() {
  if ( true ) {
    return <p>참이면 보여줄 HTML</p>;
  } 
  return null;
} 
else와 중괄호를 하나 없애도 아까 코드와 똑같은 기능을 합니다.
if -> else if -> else 이렇게 구성된 조건문도 if 두개로 축약가능합니다.

2. JSX안에서 쓰는 삼항연산자 
조건문 ? 조건문 참일때 실행할 코드 : 거짓일 때 실행할 코드
이 형식에 맞춰 쓰면 끝입니다.
function Component() {
  return (
    <div>
      {
        1 === 1
        ? <p>참이면 보여줄 HTML</p>
        : null
      }
    </div>
  )
} 
JSX 내에서 if/else 대신 쓸 수 있다는게 장점이고 if와는 다르게 JSX 안에서도 실행가능하며
조건을 간단히 주고 싶을 때 사용하며 중첩 사용도 됩니다. 
function Component() {
  return (
    <div>
      {
        1 === 1
        ? <p>참이면 보여줄 HTML</p>
        : ( 2 === 2 
            ? <p>안녕</p> 
            : <p>반갑</p> 
          )
      }
    </div>
  )
} 
return문 바깥에서 if else 쓰신 다음 그 결과를 변수로 저장해놓고 변수를 저기 집어넣든 하십시오.

3. && 연산자로 if 역할 대신하기
function Component() {
  return (
    <div>
      {
        1 === 1
        ? <p>참이면 보여줄 HTML</p>
        : null
      }
    </div>
  )
} 
function Component() {
  return (
    <div>
      { 1 === 1 && <p>참이면 보여줄 HTML</p> }
    </div>
  )
}
그래서 위의 예제 두개는 동일한 역할을 합니다.
"만약에 이 변수가 참이면 <p></p>를 이 자리에 뱉고 참이 아니면 null 뱉고"
이런 상황에서 자주 쓸 수 있는 간단한 조건문입니다.

4. switch / case 조건문
if문이 중첩해서 여러개 달려있는 경우에 가끔 씁니다.
function Component2(){
  var user = 'seller';
  if (user === 'seller'){
    return <h4>판매자 로그인</h4>
  } else if (user === 'customer'){
    return <h4>구매자 로그인</h4>
  } else {
    return <h4>그냥 로그인</h4>
  }
}
▲ if문을 저렇게 연달아 여러개 써야되는 상황들이 있으면 
자바스크립트 switch 문법을 이용하면 괄호를 조금 더 줄일 수 있습니다. 
function Component2(){
  var user = 'seller';
  switch (user){
    case 'seller' :
      return <h4>판매자 로그인</h4>
    case 'customer' :
      return <h4>구매자 로그인</h4>
    default : 
      return <h4>그냥 로그인</h4>
  }
}
▲ switch 문법 어떻게 쓰냐면 
1. switch (검사할변수){} 이거부터 작성하고
2. 그 안에 case 검사할변수가이거랑일치하냐 : 를 넣어줍니다.
3. 그래서 이게 일치하면 case : 밑에 있는 코드를 실행해줍니다.
4. default : 는 그냥 맨 마지막에 쓰는 else문과 동일합니다.

장점은 if문 연달아쓸 때 코드가 약간 줄어들 수 있는데
조건식란에서 변수하나만 검사할 수 있다는게 단점입니다. 

5. object/array 자료형 응용 
탭페이지를 만들때
일단 state를 만들어놓고 if문으로 state를 검사하는 문법을 써야할 것 같지만
이번엔 if문이 아니라 자바스크립트 object 자료형에 내가 보여주고 싶은 HTML을 다 담습니다.
function Component() {
  var 현재상태 = 'info';
  return (
    <div>
      {
        { 
           info : <p>상품정보</p>,
           shipping : <p>배송관련</p>,
           refund : <p>환불약관</p>
        }[현재상태]
      }
    </div>
  )
} 
▲ 원래 JSX 상에서 html 태그들은 저렇게 object에 담든, array에 담든 아무 상관없습니다.
암튼 이렇게 object 자료형으로 HTML을 다 정리해서 담은 다음
마지막에 object{} 뒤에 [] 대괄호를 붙여서 "key값이 현재상태인 자료를 뽑겠습니다" 라고 써놓는겁니다.
그럼 이제 현재상태라는 변수의 값에 따라서 원하는 HTML을 보여줄 수 있습니다.
변수에 저장해서 써도 깔끔해질 것 같긴 합니다 
var 탭UI = { 
  info : <p>상품정보</p>,
  shipping : <p>배송관련</p>,
  refund : <p>환불약관</p>
}
function Component() {
  var 현재상태 = 'info';
  return (
    <div>
      {
        탭UI[현재상태]
      }
    </div>
  )
} 
▲ 뭔가 매우 깔끔해졌습니다. 실은 안깔끔합니다
리액트처럼 html css js를 마구 한데 비벼서 개발하면 어떻게 해도 코드가 더러움 

22강 localStorage로 만드는 최근 본 상품 기능 1
새로고침하면 모든 state 데이터는 리셋됩니다.
왜냐면 새로고침하면 브라우저는 html css js 파일들을 첨부터 다시 읽기 때문입니다.
이게 싫다면 state 데이터를 서버로 보내서 DB에 저장하거나 하면 됩니다.
내가 서버나 DB 지식이 없다면 localStorage를 이용해도 됩니다.
유저의 브라우저에 몰래 정보를 저장하고 싶을 때 쓰는 공간입니다. 

▲ 크롬개발자 도구에서 Application 탭 들어가면 구경가능합니다.
- 사이트마다 5MB 정도의 문자 데이터를 저장할 수 있습니다.
- object 자료랑 비슷하게 key/value 형태로 저장합니다.
유저가 브라우저 청소를 하지 않는 이상 영구적으로 남아있습니다.
밑에 있는 Session Storage도 똑같은데 브라우저 끄면 삭제됩니다. 

*localStorage 문법 
그냥 js 파일 아무데서나 다음 문법을 쓰면
localStorage에 데이터 입출력할 수 있습니다.

localStorage.setItem('데이터이름', '데이터');
localStorage.getItem('데이터이름');
localStorage.removeItem('데이터이름')
차례로 추가, 읽기, 삭제 문법입니다.
진짜 저장되었는지 application 탭에서 확인해보십시오.

*localStorage에 array/object 자료를 저장하려면
문자만 저장할 수 있는 공간이라 array/object를 바로 저장할 수는 없습니다. 
array/object -> JSON 이렇게 변환해서 저장하면 됩니다. 
JSON은 문자취급을 받아서 그렇습니다. 
JSON은 그냥 따옴표친 array/object 자료입니다. 

localStorage.setItem('obj', JSON.stringify({name:'kim'}) );
JSON.stringify() 라는 함수에 array/object를 집어넣으면 그 자리에 JSON으로 변환된걸 남겨줍니다.
"{"name":"kim"}" 이런거 저장될듯 
var a = localStorage.getItem('obj');
var b = JSON.parse(a)
당연히 데이터를 다시 꺼내면 JSON이 나옵니다. 
JSON -> array/object 변환하고 싶으면 
JSON.parse()를 쓰면 되겠습니다.

23강 localStorage로 만드는 최근 본 상품 기능 2

저번시간 숙제는
1. 누가 Detail페이지 접속하면 
2. 현재 페이지에 보이는 상품id 가져와서
3. localStorage에 watch항목에 있던 [ ] 에 추가
라고 한글로 짜놓고 그대로 JS로 번역을 해봅시다. 

(Detail.js)
useEffect(()=>{
  console.log(찾은상품.id)
}, [])
1번 2번은 이렇게 하면 되겠군요. 
Detail.js 아무데나 useEffect() 하나 집어넣으면 1번 번역 끝이고
2번은 아마 예전에 let 찾은상품 이런거 만들어둔 적이 있을겁니다 
그거 쓰면 현재 페이지의 상품번호도 잘 출력가능합니다.
2번 번역 끝 

3번 localStorage에 watch항목에 추가는 
localStorage에 있던 기존 데이터를 수정하고 그런건 불가능하다고 했습니다.
입력/출력밖에 안됩니다. 
그래서 watch에 있던 [ ] 빼서 
찾은상품.id를 추가하고
다시 watch 항목으로 저장하는 식으로 코드짜면 됩니다.
localStorage 수정할 때 이렇게 하라고 저번시간에 배운듯

(Detail.js)

useEffect(()=>{
  let 꺼낸거 = localStorage.getItem('watched')
  꺼낸거 = JSON.parse(꺼낸거)
  꺼낸거.push(찾은상품.id)
  localStorage.setItem('watched', JSON.stringify(꺼낸거))
}, [])
그래서 watched에 있던 [ ] 꺼내서
찾은상품.id 추가하고
다시 watched 이름으로 집어넣으라고 했습니다. 
3번 번역 끝 

근데 같은 상품페이지 계속 접속하면 
똑같은 상품id가 계속 추가되는 현상이 발생하는군요. 

*중복제거하기
"상품id가 이미 [ ]에 있으면 추가하지 말아주세요" 라고 추가만 하면 될 것 같은데 
if 이런거 쓰기 귀찮으면 Set 자료형 쓰면 됩니다.
Set은 array와 똑같은데 중복을 알아서 제거해주는 array입니다. 
그리고 array <-> Set 변환도 쉬워서 
array -> Set -> array 이런 식으로 쓰면 array에서 중복제거를 좀 쉽게 할 수 있습니다. 

(Detail.js)

useEffect(()=>{
  let 꺼낸거 = localStorage.getItem('watched')
  꺼낸거 = JSON.parse(꺼낸거)
  꺼낸거.push(찾은상품.id)

  //Set으로 바꿨다가 다시 array로 만들기
  꺼낸거 = new Set(꺼낸거)
  꺼낸거 = Array.from(꺼낸거)
  localStorage.setItem('watched', JSON.stringify(꺼낸거))
}, [])
그래서 Set으로 바꿨다가 다시 array로 변환해봤습니다.
new Set(array자료) 하면 array를 Set으로 바꿀 수 있고
Array.from(Set자료) 하면 Set을 array로 바꿀 수 있다는군요. 
이제 상세페이지 접속할 때 마다 localStorage에 상품번호들이 중복없이 잘 추가됩니다. 

이제 심심하면 메인페이지 이런데다가 UI 하나 만들고
그 안에 최근 본 상품 id를 진열해주거나 그래봅시다.
상품id만 진열하면 안이쁠테니 상품id가지고 실제 상품명이나 이미지나 그런걸 진열해보는 것도 좋겠군요.

*localStorage에 state를 자동저장되게 만들고 싶으면
직접 코드짜도 되긴 하는데 redux-persist 이런 라이브러리 설치해서 쓰면
redux store 안에 있는 state를 자동으로 localStorage에 저장해줍니다.
state 변경될 때마다 그에 맞게 localStorage 업데이트도 알아서 해줌 
하지만 셋팅문법 복잡하고 귀찮습니다. 
그래서 요즘은 신규 사이트들은 Redux 대신 Jotai, Zustand 같은 라이브러리를 사용합니다. 
같은 기능을 제공하는데 셋팅도 거의 필요없고 문법이 훨씬 더 쉬우니까요.
그리고 그런 라이브러리들도 아마 localStorage 자동저장기능들이 있습니다. 
물론 빨리 취업하려면 리덕스 떡칠된 포트폴리오 만들어서 보여주면 됩니다.

24강 실시간 데이터가 중요하면 react-query
라이브러리 이름이 react-query에서 @tanstack/react-query로 바뀌어서 

npm install @tanstack/react-query 
1. 설치시엔 이거 입력합시다 

import { QueryClient, QueryClientProvider, useQuery } from '@tanstack/react-query' 
2. import 해서 사용시엔 이거 입력합시다 

useQuery(['작명'], 
3. useQuery쓸 때 '작명' 말고 ['작명'] 입니다 

ajax 요청하다보면 이런 기능들이 가끔 필요해집니다. 
- 몇초마다 자동으로 데이터 다시 가져오게 하려면?
- 요청실패시 몇초 간격으로 재시도?
- 다음 페이지 미리가져오기?
- ajax 성공/실패시 각각 다른 html을 보여주려면?

직접 개발해도 되겠지만 귀찮으면 react-query 라는 라이브러리 설치해서 써도 됩니다.
SNS, 코인거래소같은 실시간 데이터를 보여줘야하는 사이트들이 쓰면 유용하고
나머지 사이트들은 딱히 쓸데는 없습니다.

*react-query 설치 & 셋팅은
터미널에서 npm install @tanstack/react-query  하고 

index.js 파일 열어서  

import { QueryClient, QueryClientProvider } from "react-query"  //1번
const queryClient = new QueryClient()   //2번

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <QueryClientProvider client={queryClient}>  //3번
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </QueryClientProvider>
); 
1번 2번 3번 하면 됩니다. 

*react-query로 ajax 요청하는 법
그냥 ajax 요청해도 되는데 
react-query를 써서 ajax 요청을 날리면 더 편리한 기능을 제공합니다. 

function App(){
  let result = useQuery('[작명]', ()=>
    axios.get('https://codingapple1.github.io/userdata.json')
    .then((a)=>{ return a.data })
  )
}
useQuery 라는걸 상단에서 import 해온 뒤에 
useQuery()로 ajax 요청을 감싸면 됩니다.
그럼 유용한 기능을 제공해주는데 

장점1. ajax 요청 성공/실패/로딩중 상태를 쉽게 파악할 수 있습니다. 
function App(){
  let result = useQuery('작명', ()=>
    axios.get('https://codingapple1.github.io/userdata.json')
    .then((a)=>{ return a.data })
  )

  return (
    <div>
      { result.isLoading && '로딩중' }
      { result.error && '에러남' }
      { result.data && result.data.name }
    </div>
  )
}
result라는 변수에 ajax 현재 상태가 알아서 저장됩니다.
- ajax요청이 로딩중일 땐 result.isLoading 이 true가 됩니다. 
- ajax요청이 실패시엔 result.error 가 true가 됩니다. 
- ajax요청이 성공시엔 result.data 안에 데이터가 들어옵니다.
그래서 ajax 로딩중일 땐 <A/> 보여주세요~ ajax 성공시엔 <B/> 보여주세요~
이런거 직접 개발하려면 state 부터 만들어야 했을텐데 얘는 그럴 필요가 없습니다. 

장점2. 틈만나면 알아서 ajax 재요청해줍니다. 
페이지 체류하고나서 일정시간이 경과하거나 다른 창으로 갔다가 다시 페이지로 돌아오거나 
다시 메인페이지로 돌아가거나  이런 여러 경우에 알아서 ajax 요청을 다시 해줍니다. 
당연히 재요청 끄는 법, 재요청간격 조절하는 법도 있습니다. 

장점3. 실패시 재시도 알아서 해줌 
잠깐 인터넷이 끊겼거나 서버가 죽었거나 그러면 ajax 요청이 실패합니다.
실패했을 때는 얘가 4번인가 5번인가 재시도를 알아서 해줍니다. 편리합니다. 

장점4. ajax로 가져온 결과는 state 공유 필요없음 
지금 App 컴포넌트에서 유저이름 가져오는 ajax 요청을 날리고 있습니다. 
근데 그 유저이름 결과가 Detail 컴포넌트에도 필요하면 어쩌죠?
- props 전송 필요없이 Detail 컴포넌트에다가 유저이름 ajax 요청하는 코드 똑같이 또 적으면 됩니다.
react-query는 ajax 요청이 2개나 있으면 1개만 날려주고 캐싱기능이 있기 때문에
이미 같은 ajax 요청을 한 적이 있으면 그걸 우선 가져와서 씁니다.  
react-query가 주장하는 장점은 
server-state (DB 데이터)를 프론트엔드에서 실시간 동기화해주는걸 도와준다고 합니다.
근데 ajax 요청을 몇초마다 계속 날려서 가져오는 방식이라 좀 비효율적일 수도 있습니다. 
실시간으로 서버에서 데이터를 자주 보내려면 웹소켓이나 Server-sent events 같은 가벼운 방식들도 있습니다. 
그래서 react-query는 ajax 관련 기능개발 편하게 할 수 있는데에 의의가 더 있습니다. 

RTK Query 라이브러리도 있음 Redux Toolkit 설치한 경우 RTK Query 라는것도
기본적으로 사용가능한데 비슷한 기능들을 제공합니다. 다만 셋팅하는 코드가 좀 더럽습니다.
RTK Query는 실은 다른 용도로도 많이 쓰는데 ajax 요청후 Redux state 변경을 하고 싶다면...
원래 Redux state변경함수 안에선 ajax요청하면 안되어서 컴포넌트 안에서 해야합니다.
근데 ajax 요청하는 코드가 다양하고 많으면 컴포넌트 안의 코드가 길어지고 관리도 귀찮은데
그런걸 Slice 안에서 관리가능하게 도와줍니다. 그리고 ajax 요청하는 코드가 100만개 있으면
그걸 편리하게 관리할 수 있게 도와줍니다. 근데 코드가 약간 더러울 뿐 

25강 성능개선 1 : 개발자도구 & lazy import
props를 보냈는데 출력이 안된다거나
이미지를 넣었는데 안보이는 버그같은게 생기면
개발자도구를 켜서 Elements 탭 살펴보면 되는데
여기선 여러분이 짠 코드가 실제 html css로 변환되어서 보여집니다. 
그게 싫고 컴포넌트로 미리보고 싶으면 리액트 개발자도구를 설치해서 켜보면 됩니다. 

크롬 확장프로그램 : React Developer Tools 
크롬 웹스토어 들어가면 확장프로그램 설치가 가능합니다. 
여기서 React Developer Tools 설치하면 Components 탭이 생기는데
여러분들이 개발중인 리액트사이트를 컴포넌트로 미리볼 수 있습니다. 

왼쪽에서 컴포넌트구조 파악이 가능하고 
왼쪽상단 아이콘눌러서 컴포넌트 찍어보면
거기 있는 state, props 이런거 조회가능합니다. 수정해볼 수도 있음 
그리고 우측 상단 여러가지 버튼도 있는데 함 눌러보시면 됩니다. 크게 쓸모는 없습니다.
 

*Profiler 탭에서 성능평가 가능
Profiler 탭 들어가서
- 녹화버튼 누르고
- 페이지 이동이나 버튼조작을 해보고
- 녹화를 끝내면 
방금 렌더링된 모든 컴포넌트의 렌더링시간을 측정해줍니다. 
이상하게 느린 컴포넌트가 있다면 여기서 범인을 찾을 수 있습니다. 
<div>를 1만개 만들거나 그러지 않는 이상 보통은 걱정할 필요는 없습니다.
지연 원인 대부분은 서버에서 ajax 요청결과가 늦게 도착해서 그런 경우가 많습니다.
서버가 느린 건 어쩔 수 없음 

*Redux Developer Tools 
이것도 크롬 웹스토어에서 설치가능합니다. 
Redux store에 있던 state를 전부 확인가능합니다.
그리고 dispatch 날릴 때 마다 뭐가 어떻게 바뀌었는지 로그를 작성해줍니다. 
store 복잡해지면 유용함 

*lazy import
리액트 코드 다 짰으면 npm run build 입력해서
여러분이 짰던 이상한 코드들을 역사와 전통의 html css js 파일로 변환해야합니다.  
근데 리액트로 만드는 Single Page Application의 특징은 html, js 파일이 하나만 생성됩니다. 
그 안에 지금까지 만든 App / Detail / Cart 모든 내용이 들어있어서 파일사이즈가 좀 큽니다. 
원래 그래서 리액트 사이트들은 첫 페이지 로딩속도가 매우 느릴 수 있습니다. 

그게 싫다면 js 파일을 잘게 쪼개면 됩니다.
쪼개는 방법은 import 문법을 약간 고치면 되는데  
지금 메인페이지 보면 Detail, Cart를 import 해서 쓰고있습니다.
근데 잘 생각해보면 Detail, Cart 컴포넌트는 메인페이지에서 전혀 보이지 않고 있기 때문에
이런 컴포넌트들은 이런 문법으로 import 해놓으면 좋습니다. 

(App.js)
import Detail from './routes/Detail.js'
import Cart from './routes/Cart.js'
이거를 

(App.js)
import {lazy, Suspense, useEffect, useState} from 'react'

const Detail = lazy( () => import('./routes/Detail.js') )
const Cart = lazy( () => import('./routes/Cart.js') )
이렇게 바꾸라는 소리입니다.
lazy 문법으로도 똑같이 import가 가능한데 이 경우엔
"Detail 컴포넌트가 필요해지면 import 해주세요" 라는 뜻이 됩니다. 
그리고 이렇게 해놓으면 Detail 컴포넌트 내용을 다른 js 파일로 쪼개줍니다.
그래서 첫 페이지 로딩속도를 향상시킬 수 있습니다.

<Suspense fallback={ <div>로딩중임</div> }>
  <Detail shoes={shoes} />
</Suspense>
lazy 사용하면 당연히 Detail 컴포넌트 로드까지 지연시간이 발생할 수 있습니다. 그럴 땐
1. Suspense 라는거 import 해오고
2. Detail 컴포넌트를 감싸면
Detail 컴포넌트가 로딩중일 때 대신 보여줄 html 작성도 가능합니다. 
귀찮으면 <Suspense> 이걸로 <Routes> 전부 감싸도 됩니다. 

26강 성능개선 2 : 재렌더링 막는 memo, useMemo
컴포넌트가 재렌더링되면 거기 안에 있는 자식컴포넌트는 항상 함께 재렌더링됩니다.
리액트는 그렇게 대충 무식하게 동작하는데
평소엔 별 문제가 없겠지만 자식컴포넌트가 렌더링시간이 1초나 걸리는 무거운 컴포넌트면 어쩔 것입니까. 
부모컴포넌트에 있는 버튼 누를 때 마다 1초 버벅이는 불상사가 발생합니다. 
그럴 땐 자식을 memo로 감싸놓으면 됩니다. 

*테스트용 자식 컴포넌트 하나 만들어보기 
function Child(){
  console.log('재렌더링됨')
  return <div>자식임</div>
}

function Cart(){ 

  let [count, setCount] = useState(0)

  return (
    <Child />
    <button onClick={()=>{ setCount(count+1) }}> + </button>
  )
}
Cart 컴포넌트 안에 Child 컴포넌트를 만들었습니다.
그리고 버튼누를 때 Cart 컴포넌트가 재렌더링되게 만들어놨는데
이 경우 <Child> 이것도 재렌더링됩니다.
평소엔 별 문제가 없겠지만 <Child> 얘가 렌더링이 2초정도 걸리는 느린 컴포넌트면 어쩌죠?
그럼 버튼 누를 때 마다 버벅일듯요.
그럴 땐 memo라는 함수를 쓰면
"꼭 필요할 때만 <Child> 컴포넌트 재렌더링해주세요" 라고 코드를 짤 수도 있습니다. 


*memo()로 컴포넌트 불필요한 재렌더링 막기
memo() 써보려면 'react' 라이브러리로부터 import 해오시면 됩니다.
import {memo, useState} from 'react'

let Child = memo( function(){
  console.log('재렌더링됨')
  return <div>자식임</div>
})

function Cart(){ 

  let [count, setCount] = useState(0)

  return (
    <Child />
    <button onClick={()=>{ setCount(count+1) }}> + </button>
  )
}
1. memo를 import 해와서
2. 원하는 컴포넌트 정의부분을 감싸면 됩니다. 
근데 컴포넌트를 let 컴포넌트명 = function( ){ } 이런 식으로 만들어야 감쌀 수 있습니다.
그럼 이제 Child로 전송되는 props가 변하거나 그런 경우에만 재렌더링됩니다. 
 
Q. 어 그럼 memo는 좋은거니까 막써도 되겠네요?
memo로 감싼 컴포넌트는 헛된 재렌더링을 안시키려고
기존 props와 바뀐 props를 비교하는 연산이 추가로 진행됩니다.
props가 크고 복잡하면 이거 자체로도 부담이 될 수도 있습니다.
그래서 꼭 필요한 곳에만 사용합시다. 

*비슷하게 생긴 useMemo

비슷한 useMemo라는 문법도 있는데 이건 그냥 useEffect와 비슷한 용도입니다.
컴포넌트 로드시 1회만 실행하고 싶은 코드가 있으면 거기 담으면 됩니다. 
import {useMemo, useState} from 'react'

function 함수(){
  return 반복문10억번돌린결과
}

function Cart(){ 

  let result = useMemo(()=>{ return 함수() }, [])

  return (
    <Child />
    <button onClick={()=>{ setCount(count+1) }}> + </button>
  )
}
1. 예를 들어서 반복문을 10억번 돌려야하는 경우 
2. 그 함수를 useMemo 안에 넣어두면 컴포넌트 로드시 1회만 실행됩니다. 
그럼 재렌더링마다 동작안하니까 좀 효율적으로 동작하겠죠? 
useEffect 처럼 dependency도 넣을 수 있어서 
특정 state, props가 변할 때만 실행할 수도 있습니다. 

27강 성능개선 3 : useTransition, useDeferredValue
리액트18버전 이후부터
렌더링 성능이 저하되는 컴포넌트에서 쓸 수 있는 혁신적인 기능이 하나 추가되었습니다. 
useTransition 이건데 이걸로 오래걸리는 부분을 감싸면 렌더링시 버벅이지 않게 해줍니다.
실은 코드 실행시점만 조절해주는 식임
리액트 18버전부터 추가된 기능 1 : 일관된 batching
automatic batching 이라는 기능이 있는데 
setCount(1) 
setName(2) 
setValue(3)   //여기서 1번만 재렌더링됨
state변경함수를 연달아서 3개 사용하면 재렌더링도 원래 3번 되어야하지만 
리액트는 똑똑하게도 재렌더링을 마지막에 1회만 처리해줍니다. 
일종의 쓸데없는 재렌더링 방지기능이고 batching이라고 합니다.
fetch().then(() => {
    setCount(1)   //재렌더링됨
    setName(2)   //재렌더링됨
}) 
근데 문제는 ajax요청, setTimeout안에 state변경함수가 있는 경우 batching이 일어나지 않습니다. 
리액트 17버전까진 그런 식으로 일관적이지 않게 동작했는데
18버전 이후 부터는 어디 있든 간에 재렌더링은 마지막에 1번만 됩니다. 

batching 되는게 싫고 state변경함수 실행마다 재렌더링시키고 싶으면 
flushSync라는 함수를 쓰면 됩니다. 필요하면 찾아봅시다.

*리액트 18버전부터 추가된 기능 2 : useTransition 추가됨
렌더링시간이 매우 오래걸리는 컴포넌트가 있다고 칩시다. 
버튼클릭, 타이핑할 때 마다 그 컴포넌트를 렌더링해야한다면
이상하게 버튼클릭, 타이핑 반응속도도 느려집니다. 
사람들은 원래 클릭, 타이핑을 했을 때 0.3초 이상 반응이 없으면 불편함을 느끼기 때문에
개선방법을 알아봅시다. 

당연히 그 컴포넌트 안의 html 갯수를 줄이면 대부분 해결됩니다. 
근데 그런게 안되면 useTransition 기능을 쓰면 됩니다. 

*우선 재렌더링이 느린 컴포넌트 만들어보기 
import {useState} from 'react'

let a = new Array(10000).fill(0)

function App(){
  let [name, setName] = useState('')
  
  return (
    <div>
      <input onChange={ (e)=>{ setName(e.target.value) }}/>
      {
        a.map(()=>{
          return <div>{name}</div>
        })
      }
    </div>
  )
}
- 데이터가 10000개 들어있는 array자료를 하나 만들고
- 그 갯수만큼 <div>를 생성하라고 했습니다.
- 그리고 유저가 타이핑할 수 있는 <input>도 만들어봤습니다.

유저가 <input>에 타이핑하면 그 글자를 <div> 1만개안에 집어넣어줘야하는데
<div> 1만개 렌더링해주느라 <input>도 많은 지연시간이 발생합니다.
타이핑한 결과가 바로바로 반응이 안옵니다. 답답해죽음 

*useTransition 쓰면 
import {useState, useTransition} from 'react'

let a = new Array(10000).fill(0)

function App(){
  let [name, setName] = useState('')
  let [isPending, startTransition] = useTransition()
  
  return (
    <div>
      <input onChange={ (e)=>{ 
        startTransition(()=>{
          setName(e.target.value) 
        })
      }}/>

      {
        a.map(()=>{
          return <div>{name}</div>
        })
      }
    </div>
  )
}
- useTransition() 쓰면 그 자리에 [변수, 함수]가 남습니다. 
- 그 중 우측에 있는 startTransition() 함수로 state변경함수 같은걸 묶으면
그걸 다른 코드들보다 나중에 처리해줍니다.

그래서 <input> 타이핑같이 즉각 반응해야하는걸 우선적으로 처리해줄 수 있습니다. 
타이핑해보면 아까보다 반응속도가 훨씬 낫습니다. 

물론 근본적인 성능개선이라기보단 특정코드의 실행시점을 뒤로 옮겨주는 것일 뿐입니다. 
html이 많으면 여러페이지로 쪼개십시오. 

isPending은 어디다 쓰냐면 
startTransition() 으로 감싼 코드가 처리중일 때 true로 변하는 변수입니다.
{
  isPending ? "로딩중기다리셈" :
  a.map(()=>{
    return <div>{name}</div>
  })
} 
그래서 이런 식으로 코드짜는 것도 가능합니다.
위의 코드는 useTransition으로 감싼게 처리완료되면 <div>{name}</div> 이게 보이겠군요.

*useDeferredValue 이것도 비슷함
startTransition() 이거랑 용도가 똑같습니다.
근데 얘는 state 아니면 변수하나를 집어넣을 수 있게 되어있습니다. 
그래서 그 변수에 변동사항이 생기면 그걸 늦게 처리해줍니다. 
import {useState, useTransition, useDeferredValue} from 'react'

let a = new Array(10000).fill(0)

function App(){
  let [name, setName] = useState('')
  let state1 = useDeferredValue(name)
  
  return (
    <div>
      <input onChange={ (e)=>{ 
          setName(e.target.value) 
      }}/>

      {
        a.map(()=>{
          return <div>{state1}</div>
        })
      }
    </div>
  )
}
이렇게 쓰면 아까랑 똑같은 기능을 개발가능합니다.
- useDeferredValue 안에 state를 집어넣으면 그 state가 변동사항이 생겼을 때 나중에 처리해줍니다.
그리고 처리결과는 let state에 저장해줍니다. 

28강 state 변경함수 사용할 때 주의점 : async
*자바스크립트의 sync / async 관련 상식
자바스크립트는 일반적인 코드를 작성하면 synchronous 하게 처리됩니다. 번역하면 동기방식 이런데.. 
뭔소리냐면 코드 적은 순서대로 윗줄부터 차례로 코드가 실행된다는 뜻입니다.
실은 거의 모든 프로그래밍 언어들은 무조건 위에서 부터 한줄한줄 실행됩니다. 
예를 들어 
console.log(1+1)
console.log(1+2)
console.log(1+3)
이런 코드는 그냥 위에서부터 한줄한줄 잘 실행됩니다. 그니까 콘솔창에 2, 3, 4 순으로 출력된다는 소리입니다. 

예를 들어 
console.log(1+1)
axios로 get요청하고나서 console.log(1+2) 실행해주셈~
console.log(1+3)
이런 코드는 2, 4가 바로 출력되고 그 다음에 3이 출력됩니다.
3을 출력하는 코드가 asynchronous 처리를 지원하는 코드라 그렇습니다. 
3을 출력할 때 오래걸리면 완료될 때 까지 잠깐 보류했다가 다른 코드를 먼저 실행시킨다는 소리입니다. 
심지어 ajax요청이 0.00초 걸려도 2, 4가 먼저, 그 다음 3이 출력됩니다.
물리적으로 잠깐 처리가 보류되어서 그렇습니다. 
자바스크립트라는 언어의 특징이자 장점이라고 볼 수 있겠습니다. 
(asynchronous 처리를 지원하는 함수들을 써야 이런 식으로 동작합니다)

*리액트의 setState 함수 특징

리액트로 state 만들 땐 이렇게 합니다. 
function App(){
  let [name, setName] = useState('kim')
}
그리고 이제 setName을 사용하시면 name이라는 state를 자유롭게 변경가능합니다. 
setName('park') 이런 식으로 하면 변경된다는 겁니다.
근데 문제는 setName() 같은 state 변경함수들은 전부 asynchronous (비동기적) 으로 처리됩니다.
그니까 setName()이 오래걸리면 이거 제껴두고 다른 밑에 있는 코드들부터 실행한다는 겁니다.
그래서 뭔가 예상치 못한 문제가 생길 수 있습니다. 

예제 : 버튼을 누르면 2개 기능을 순차적으로 실행하고 싶습니다.
function App(){
  let [count, setCount] = useState(0);
  let [age, setAge] = useState(20);

  return (
    <div>
      <div>안녕하십니까 전 {age}</div>
      <button>누르면한살먹기</button>
    </div>
  )

}
 
위와 같은 코드가 있다고 칩시다.
버튼을 누를 때마다
(1) count라는 state를 +1 해야합니다. (버튼누른 횟수 기록용)
(2) age라는 state도 +1 해야합니다. 
(3) 근데 count 가 3 이상이면 더 이상 age라는 state를 1 더하지 말도록 코드를 짜십시오.
버튼 3번 이상 누르면 (count가 3 이상이면) 나이를 그만더하라는 기능입니다. 그니까 22살에서 멈춰야합니다.
이거 코드 어떻게 짜면 되죠? 버튼에다가 onClick 열고 짜면 될 것 같은데 빨리 짜보십시오. 

저는 이렇게 짰습니다. 잘 되는 것 같지만 뭔가 이상합니다. 
<button onClick={()=>{
  setCount(count+1);
  if ( count < 3 ) {
    setAge(age+1);
  }
         
}}>누르면한살먹기</button> 
1. 버튼을 누르면 count를 +1 해줍니다. 버튼누른 횟수 기록용이니까요.
2. 그리고 만약에 count라는게 3회보다 적으면 age를 +1 해줍니다.
끝입니다. 그러면 아마 count라는게 2일 때 까지 실행해주니까
age는 20에서 22가 되면 더이상 증가하지 않고 멈추겠군요. 
근데 23까지 증가하는데얌? 뭔가 이상합니다. 
분명 count가 2일 때까지만 age를 +1 해주라고 했습니다.
count가 1일 때 age +1
count가 2일 때 age +1
count가 3이면 age +1 하지마 이런 코드니까요. 
근데 지금은 count가 3일 때도 age +1를 해주고 있는 듯 합니다. 

왜죠? 

이유는 위에서 제가 말한 async라는 특징 때문에 그렇습니다. 
state 변경함수는 async 하게 처리되는 함수기 때문에 완료되기까지 시간이 오래걸리면 제쳐두고 
다음 코드를 실행해줍니다.

그래서 코드를 해석해보자면 
① 버튼을 세번째 누르면 setCount(count+1); 이걸 실행해서 count를 3을 만들어줍니다.
② 근데 count를 3으로 만드는건 오래걸리니까 제껴두고 if ( count > 3 ) {} 이걸 실행합니다.
③ 이 때 count는 아직 2라서 if문 안의 setAge(age+1)이 잘 동작하고 있는겁니다.

이 모든 문제는 setCount()가 async 함수라서 그렇습니다. 
async함수는 오래걸리면 제껴두고 다음 줄 코드부터 실행하니까 그렇습니다.

그래서 저렇게 state1 변경하고나서 state2를 변경하는 코드를 작성할 땐 가끔 문제가 생깁니다.
이걸 정확히 sync스럽게, 순차적으로 실행하고 싶을 때 해결책은 useEffect입니다. 
useEffect를 잘 작성하면 특정 state가 변경될 때 useEffect를 실행할 수 있다고 하지 않았습니까.
알아서 해결해보십시오.

*해결방법
App 컴포넌트안에 useEffect를 만들어봅니다.
useEffect(()=>{
    
 }, [count]) 
useEffect는 컴포넌트가 렌더링/재렌더링될 때 실행되는 함수랬습니다.
근데 뒤에다가 [] 대괄호안에 state를 집어넣으면
state가 변경되면 이 코드 실행해주세요~ 라는 뜻으로도 사용가능합니다.
그래서 이거 쓰시면 아까 말했던 문제를 해결할 수 있습니다. 
1. count라는 state가 변경되고나서 2. age도 변경해주세요~ 이런 식으로 순차적으로
코드를 실행할 수 있다는 것입니다. 

① 그래서 일단 버튼을 이렇게 변경했습니다. 
<button onClick={()=>{

  setCount(count+1);

}}>누르면한살먹기</button> 
count라는 것만 +1 되게 바꿨습니다. 
② 그 다음에 나머지 age를 +1 하는 코드는 useEffect안에 개발해놨습니다.
useEffect(()=>{
  if ( count < 3 ) {
    setAge(age+1)
  }
 }, [count]) 
이런 식입니다.
그러면 useEffect는 count라는 state가 변경되고나서 실행이 되며
그럼 if문으로 count라는 state값을 제대로 의도대로 측정해볼 수 있는 겁니다.
③ 근데 문제는 useEffect 저렇게 써도 처음 페이지 로드될 때도
한번 실행이 되기 때문에 의도치 않은 버그가 발생할 수 있습니다. 
그래서 처음 페이지 로드시 useEffect 실행을 막는 코드를 알아서 검색해서 적용하셔도 되고
아니면 count라는 state를 또 활용하셔도 됩니다. 
count가 0일 때는 (페이지 처음 로드되었을 때는) 내부 코드를 동작시키지 않으면 될듯요
useEffect(()=>{
  if ( count != 0 && count < 3 ) {
    setAge(age+1)
  }
 }, [count]) 
이런 식입니다. count가 0이 아닐 때만 실행하라고 조건을 추가해줬습니다.
이제 버튼 누르면 22살까지만 잘 증가합니다.

문제해결! 이지만
- 혹은 count와 age를 동시에 한 곳의 state에 array/object자료형으로 집어넣어놓어보거나 
- 하나는 굳이 state로 만들지 않고 일반 var 변수로 만드는 것도 쉽게 해결할 수 있을듯요?
변경시 HTML 자동 재렌더링이 필요한 변수들은 state로 만들라고 했지않습니까. 

29강 Node+Express 서버와 React 연동하려면
리액트를 내가 만든 서버에서 사용하고 싶으면 어떻게 하는지 알아봅시다. 
서버는 유저가 메인페이지로 접속하면 리액트로 만든 html 파일을 보내주면 그게 연동 끝입니다. 

*임시 서버를 Nodejs + Express로 쉽게 만들어봅시다. 
1. 구글검색해서 nodejs 설치
2. 작업폴더만들고 에디터로 오픈
3. server.js 파일을 만들고 아래 코드 작성
const express = require('express');
const path = require('path');
const app = express();

app.listen(8080, function () {
  console.log('listening on 8080')
}); 
4. 터미널을 열어서 npm init -y 입력 
5. npm install express 이것도 입력  

이러면 웹서버만들기 끝입니다.
서버 미리보기 띄우고 싶으면 터미널열어서 nodemon server.js를 입력합니다.
nodemon 이런게 없으면 node server.js 입력해야합니다.

*리액트는 HTML을 이쁘게 만들어주는 툴입니다. 
왜 쓰는지도 모르고 리액트 배우는 사람들이 많은데 
리액트는 대단한거 아니고 앱처럼 부드럽게 동작하는 html을 만들고 싶을 때 사용하는 툴입니다.

▲ 카톡 같은 모바일 앱 생각해보면
그런 앱들은 새로고침 없이 페이지 전환이 샥샥 되죠?
그런 식으로 새로고침할 필요없이 부드럽게 전환되는 사이트를 만들고 싶을 때 리액트 쓰면 됩니다. 
그런 사이트를 전문용어로 Single Page Application 이라고 합니다. 
쌩자바스크립트로도 가능한데 코드 길어져서 귀찮아서 리액트 쓰는 것임

*리액트 프로젝트 만드는 법 
지금 하고 있는 server.js 옆에 서브폴더로 리액트 프로젝트를 하나 만들어봅시다. 
0. 구글 검색해서 nodejs 최신버전 설치하고 
1. 터미널에 npx create-react-app 프로젝트명 을 입력합니다. 프로젝트명 자유작명하셈 다만 작명할 때 띄어쓰기하지마십시오. 
2. 그럼 서브폴더에 리액트 프로젝트가 생성되는데 그걸 다시 에디터로 오픈합니다.
3. 리액트 문법으로 열심히 만들고 싶은걸 개발해봅니다. 개발시 코드를 미리보고 싶으면 npm run start 를 입력합니다.   
4. 개발 완료되면 리액트 프로젝트 터미널에 npm run build를 입력하면 리액트 완성본 html 파일이 build 폴더내에 생성됩니다.
그 html 파일을 서버에서 필요할 때 유저에게 보내주면 됩니다. 

*리액트로 만든 HTML 전송하는법 
무슨 서버언어를 쓰든간에 
리액트로 개발한 html파일을 고객에게 보내주면 그게 서버랑 리액트 합치는거 끝입니다. 

▲ 리액트로 개발을 다 마친 후 npm run build 라는걸 하시면 build라는 폴더가 생기고 안에 html css js 파일이 생성됩니다.
그 중에 html 파일은 사진에 보이는 index.html 파일 딱 하나입니다. 
왜냐면 기본적인 리액트 프로젝트는 SPA라는걸 만들어주는데
SPA는 기본적으로 html 파일 하나만 씁니다. 

이걸 서버에다가 이렇게 코드를 짜면 
(server.js)
어떤 놈이 메인페이지로 접속하면 저거 리액트로 build한 index.html 보내주셈
리액트와 Nodejs 서버 합치기 끝입니다. 

▲ 예를 들면 폴더구조를 이렇게 만들었다고 칩시다.
server.js 옆에다가 react-project라는 폴더명으로 리액트 프로젝트를 하나 만든겁니다. 
그럼 안에 build한 파일들이 있겠죠?

이렇게 되어있는 경우 코드를 어떻게 짜냐면  
(server.js에 추가)
app.use(express.static(path.join(__dirname, 'react-project/build')));

app.get('/', function (요청, 응답) {
  응답.sendFile(path.join(__dirname, '/react-project/build/index.html'));
});
express.static이라는걸 쓰시면 특정 폴더안의 파일들을 static 파일로 고객들에게 잘 보내줄 수 있습니다. 
그럼 아마 build 폴더 안의 css js img 파일들도 잘 사용할 수 있겠죠. 
그리고 늘 하던대로 누군가 / 페이지로 접속하면 리액트로 만든 html 보내주는겁니다.
그럼 localhost:8080 으로 접속하시면 리액트 프로젝트가 나옵니다. 합치기 끝

Q. 리액트에서 라우팅을 담당하는 경우?
서버에서도 라우팅을 담당해줄 수 있고 
리액트에서도 라우팅을 담당해줄 수 있습니다. 리액트는 react-router-dom을 설치하면 됩니다.
그럼 리액트상에서 누가 /list 로 접속하면 글목록 보여주고 /mypage 접속하면 마이페이지도 보여줄 수 있습니다. 

근데 리액트 라우터로 /list 페이지를 개발해놨는데 실제 localhost:8080/list 로
직접 URL 입력해서 접속하면 아무것도 안뜹니다. 
왜냐면 브라우저 URL창에 때려박는건 서버에게 요청하는거지 리액트 라우터에게 라우팅 요청하는게 아니기 때문입니다. 
이걸 리액트가 라우팅하게 전권을 넘기고 싶다면 server.js 에 다음과 같은 코드를 밑에 추가하십시오. 
(server.js에 추가)
app.get('*', function (요청, 응답) {
  응답.sendFile(path.join(__dirname, '/react-project/build/index.html'));
});
별표 * 라는 것은 모든 문자라는 뜻입니다. 
"고객이 URL란에 아무거나 입력하면 걍 리액트 프로젝트나 보내주셈"이라는 뜻인데 이렇게 하면 리액트 라우팅 잘됩니다. 
이 코드는 항상 가장 하단에 놓아야 잘됩니다. 

Q. 리액트에서 DB데이터 보여주고 싶으면? 
예를 들어서 DB에서 글목록 데이터를 꺼내서 HTML로 보여주고 싶은 경우
server-side rendering / client-side rendering 둘 중 하나 선택하면 됩니다. 

server-side rendering은 html을 서버가 만들어서 보내주는 겁니다. 
nodejs 강의처럼
1. DB에서 데이터 뽑아서
2. 글목록.html 파일에 꽂아넣고
3. 그 html 파일을 서버에서 보내주는 것임 

client-side rendering은 html을 리액트가 브라우저안에서 만드는 겁니다.
1. 리액트가 서버에 GET요청으로 DB데이터를 가져와서
2. 그걸 html로 만들어서 보여주는 것임 

리액트를 쓰는 경우 보통 client-side rendering을 합니다.
그래서 DB에 있는 상품목록을 가져와서 리액트에서 보여주고 싶으면 
이런 식으로 코드를 짭니다. 
1. 서버는 누군가 /product로 GET요청을 하면 DB에서 데이터 꺼내서 보내주라고 API를 짜놓습니다. 
2. 리액트는 상품목록을 보여주고 싶을 때 서버 /product 주소로 GET요청 날리면 됩니다.
3. 그럼 데이터 받아오겠죠? 그걸 가지고 html에 집어넣든 맘대로 개발하면 됩니다. 
그래서 리액트는 서버와의 통신은 거의 ajax로 진행합니다.
POST요청, 로그인해서 세션만들기 이런것도 ajax로 잘됩니다. 

근데 nodejs 서버파일 상단엔
app.use(express.json());
var cors = require('cors');
app.use(cors());
이 코드 넣고 시작하셔야 리액트와 nodejs 서버간 ajax 요청 잘됩니다. 
이거 쓰려면 서버프로젝트 터미널에서 npm install cors 설치해야합니다. 
express.json() 은 유저가 보낸 array/object 데이터를 출력해보기 위해 필요하고
cors는 다른 도메인주소끼리 ajax 요청 주고받을 때 필요합니다. 

Q. 리액트프로젝트 코드 수정할 때 마다 build 작업을 해야하나요? 
그럴 필요 없습니다.
그건 나중에 사이트를 aws, google cloud 이런 곳에 발행할 때만 한 번 해주면 됩니다. 
평소에 개발할 땐 
리액트도 localhost로 미리보기 띄워놓고, 서버도 localhost로 미리보기를 띄워두고 개발 진행하면 별 문제 없습니다.
- 다만 리액트 -> 서버 ajax 요청시 /product 이렇게 말고 http://서버주소/product 잘 입력하고
- 서버에 cors 옵션 잘 켜놓으면 됩니다. 

서버주소 입력하는게 귀찮으면  
리액트에서 package.json이라는 파일을 열어서 proxy라는 부분 설정을
서버 미리보기 띄우던 localhost:어쩌구 주소로 설정해주면 됩니다. 
그러면 리액트에서 ajax 요청 대충해도 localhost:어쩌구 주소로 ajax 요청을 알아서 보내줍니다. 
https://create-react-app.dev/docs/proxying-api-requests-in-development/
이걸 참고합시다. 

*서브디렉토리에 리액트앱 발행하고 싶은 경우 
지금 메인페이지가 리액트앱인데 그거 말고
/react 이렇게 접속하면 리액트로 만든 html
/ 이렇게 접속하면 public 폴더에 있던 그냥 main.html
보여주고 싶은 경우 어떻게 하냐면 
(server.js)

app.use( '/', express.static( path.join(__dirname, 'public') ))
app.use( '/react', express.static( path.join(__dirname, 'react-project/build') ))

app.get('/', function(요청,응답){
  응답.sendFile( path.join(__dirname, 'public/main.html') )
}) 
app.get('/react', function(요청,응답){
  응답.sendFile( path.join(__dirname, 'react-project/build/index.html') )
})
▲ server.js 라우팅을 이렇게 바꿔주고 

(리액트프로젝트 내의 package.json)
{
  "homepage": "/react",
  "version": "0.1.0",
  ... 등
} 
▲ 리액트 프로젝트 내의 package.json에 homepage라는 항목을
여러분이 발행을 원하는 서브디렉토리명으로 새로 기입해주면 됩니다. 
그럼 방금 server.js 에서 /react 접속시 리액트 프로젝트보내고 
/ 접속시 일반 html 파일 보내라고 했으니 정말 그렇게 됩니다. 
딱히 쓸 일은 별로 없습니다. 