2강 리액트 React 설치와 개발환경 셋팅 (2022 ver)
*리액트 미리보기 npm start a
프로젝트 생성  npx create -react-app blog

3강 리액트에서 레이아웃 만들 때 쓰는 JSX 문법 3개
JSX 문법 1. html에 class 넣을 땐 className
JSX문법2. 변수넣을 땐 중괄호
ex)
function App(){
  let post = '강남 우동 맛집';
  return (
    <div className="App">
      <div className="black-nav">
        <div id={post}>블로그임</div> id,classnam등 모든 곳넣을 수 있다
        <div>{ post }</div>
      </div>
    </div>
  )
}
*style은 이런식으로
<div style={ {color : 'blue', fontSize : '30px'} }> 글씨 </div>
JSX 문법 3. html에 style속성 넣고싶으면 

4강 중요한 데이터는 변수말고 state에 담습니다
*state는  변수와 다르게 수정시 html에 재랜더링
로고같은 자주 안 바뀌는 건 변수 자주 바뀌는건 state사용하기
사용 예) let [a,b] = useState('남자 코트 추천');
           let posts = '강남 우동 맛집';

5강 버튼에 기능개발을 해보자 & 리액트 state변경하는 법
빨간 error는 해결해야하지만 warning은 개무시해도 됩
/*eslint-disable*/이라는 주석을 js 파일 최상단에 추가해주면 eslint 기능 off

onClick={}안에 함수이름을 넣어야 함
예시1) <div onclick="실행할 자바스크립트~~~">
        일반 html 파일에선 이렇게 하면 됩니다.
        <div onClick={실행할함수}>
예시2) <div onClick={ function(){ 실행할코드 } }> 
        <div onClick={ () => { 실행할코드 } }>

*  let [따봉, 따봉변경] = useState(0);
따봉변경이 state변경용함수 재랜더링도 잘됨

6강 array, object state 변경하는 법
array,object 다룰 때 원본은 보존하는 게 좋음
ex)    <button onClick={() => {
      let copy = [...글제목];
      copy[0] = '여자코트 추천';
      글제목변경(copy);
    }}>글수정</button>

7강 Component : 많은 div들을 한 단어로 줄이고 싶으면
의미없는 div대신 <></> 사용가능

function Modal(){
  return ( <div></div> )
}

let Modal = () => {
  return ( <div></div>) 
}
함수 만드는 문법이 하나만 있는게 아니라 저렇게 써도 됩니다. 
let 대신 const 변수 쓰는 사람들도 있습니다. 

8강 리액트 환경에서 동적인 UI 만드는 법 (모달창만들기)
저 state가 true면 <Modal></Modal> 보여주고 
false면 아무것도 보여주지마세요~
function App (){
  let [modal, setModal] = useState(false);
  return (
    <div className="app">
      (생략)
      {
        modal == true ? <Modal></Modal> : null
      }
    </div>
  )
}

9강 map : 많은 div들을 반복문으로 줄이고 싶은 충동이 들 때
기능 1. array에 들어있는 자료갯수만큼 그 안에 있는 코드를 반복실행해줍니다.
*자바스크립트 map 함수 쓰는 법 
var 어레이 = [2,3,4];
어레이.map(function(){
  console.log(1)
});

기능 2. 콜백함수에 파라미터 아무렇게나 작명하면
그 파라미터는 어레이 안에 있던 모든 자료를 하나씩 출력해줍니다.
(그냥 소괄호안에 있는 함수를 콜백함수라고 합니다)
var 어레이 = [2,3,4];
어레이.map(function(a){
  console.log(a)
});

기능3. return 오른쪽에 뭐 적으면 array로 담아줍니다.
newArray는 [20, 30, 40] 이 출력됩니다. 
var 어레이 = [2,3,4];
var newArray = 어레이.map(function(a){
  return a * 10
});
console.log(newArray)

*JSX 안에서 html을 반복생성하고 싶으면
function App (){
  return (
    <div>
      { 
        [1,2,3].map(function(){
          return ( <div>안녕</div> )
        }) 
      }
    </div>
  )
}
*자바스크립트 map 함수 쓰는 법 
var 어레이 = [2,3,4];
어레이.map(function(){
  console.log(1)
});

10강 자식이 부모의 state 가져다쓰고 싶을 때는 props
부모 -> 자식 state 전송하는 법(자식 -> 부모 props 안됨)
1. 자식컴포넌트 사용하는 곳에 가서 <자식컴포넌트 작명={state이름} /> 
2. 자식컴포넌트 만드는 곳에 가서 props라는 파라미터 등록 후 props.작명 사용하면 됩니다.
props 전송문법은 중요하니 외워두도록 합시다. 
function App (){
  let [글제목, 글제목변경] = useState(['남자코트 추천', '강남 우동맛집', '파이썬독학']);
  return (
    <div>
      <Modal 글제목={글제목}></Modal>
    </div>
  )
}

function Modal(props){
  return (
    <div className="modal">
      <h4>{ props.글제목[0] }</h4>
      <p>날짜</p>
      <p>상세내용</p>
    </div>
  )
}

11강 props를 응용한 상세페이지 만들기
ex)function App (){
  let [title, setTitle] = useState(0);
  (생략)
  {
    modal == true ? <Modal title={title} 글제목={글제목} /> : null
  }
}

function Modal(props){
  return (
    <div className="modal">
      <h4>{ props.글제목[props.title] }</h4>
      <p>날짜</p>
      <p>상세내용</p>
    </div>
  )
}
*map+props 이용해 클릭시 해당 모달 도출
function App (){
  return (
    <div>
      { 
        글제목.map(function(a, i){
          return (
          <div className="list">
            <h4 onClick={()=>{ setModal(true); setTitle(i); }}>{ 글제목[i] }</h4>
            <p>2월 18일 발행</p>
          </div> )
        }) 
      }
    </div>
  )
}

13강 input 다루기 2 : 블로그 글발행 및 삭제
  let [글제목, 글제목변경] = useState(['남자 코트 추천', '강남 우동 맛집', '파이썬독학']);
  let [입력값, 입력값변경] = useState(0);
   {
        글제목.map(function (a, i) {
          return (
            <div className="list">
              <h4 onClick={() => {
                setModal(!modal);
                setTitle(i);
              }}>{글제목[i]}<span onClick={() => {
                let copy = [...따봉]
                copy[i] = copy[i] + 1;
                따봉변경(copy)
              }}>👍</span>{따봉[i]} </h4>
              <p>2월 17일 발행</p>
              <button onClick={() => {
                let copy = [...글제목];
                copy.splice(i, 1);
                글제목변경(copy);
              }}>삭제</button>
            </div>
          )
        })
      }

14강 class를 이용한 옛날 React 문법
*class 문법으로 컴포넌트 만드는 법 
class Modal2 extends React.Component {
  constructor(){
    super()
  }

  render(){
    return (
      <div>안녕</div>
    )
  }

}
*class 컴포넌트에서 state 만들려면  
class Modal2 extends React.Component {
  constructor(){
    super();
    this.state = {
      name : 'kim',
      age : 20
    }
  }
  render(){
    return (
      <div>안녕 { this.state.name }</div>
    )
  }

}
*class 컴포넌트에서 state 변경은  
class Modal2 extends React.Component {
  constructor(){
    super();
    this.state = {
      name : 'kim',
      age : 20
    }
  }

  render(){
    return (
      <div>안녕 { this.state.age }
        <button onClick={()=>{ this.setState({age : 21}) }}>버튼</button>
      </div>
    )
  }

}
*class 컴포넌트에서 props는 
class Modal2 extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      name : 'kim',
      age : 20
    }
  }

  render(){
    return (
      <div>안녕 { this.props.프롭스이름 }</div>
    )
  }

}